// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: inventory.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TunnelStatus int32

const (
	TunnelStatus_TUNNEL_UNKNOWN    TunnelStatus = 0
	TunnelStatus_TUNNEL_UP         TunnelStatus = 1
	TunnelStatus_TUNNEL_DOWN       TunnelStatus = 2
	TunnelStatus_TUNNEL_ADMIN_DOWN TunnelStatus = 3
)

// Enum value maps for TunnelStatus.
var (
	TunnelStatus_name = map[int32]string{
		0: "TUNNEL_UNKNOWN",
		1: "TUNNEL_UP",
		2: "TUNNEL_DOWN",
		3: "TUNNEL_ADMIN_DOWN",
	}
	TunnelStatus_value = map[string]int32{
		"TUNNEL_UNKNOWN":    0,
		"TUNNEL_UP":         1,
		"TUNNEL_DOWN":       2,
		"TUNNEL_ADMIN_DOWN": 3,
	}
)

func (x TunnelStatus) Enum() *TunnelStatus {
	p := new(TunnelStatus)
	*p = x
	return p
}

func (x TunnelStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[0].Descriptor()
}

func (TunnelStatus) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[0]
}

func (x TunnelStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelStatus.Descriptor instead.
func (TunnelStatus) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{0}
}

type TunnelType int32

const (
	TunnelType_TUNNEL_TYPE_UNKNOWN TunnelType = 0
	TunnelType_TUNNEL_TYPE_P2P     TunnelType = 1
	TunnelType_TUNNEL_TYPE_P2MP    TunnelType = 2
	TunnelType_TUNNEL_TYPE_MP2MP   TunnelType = 3
)

// Enum value maps for TunnelType.
var (
	TunnelType_name = map[int32]string{
		0: "TUNNEL_TYPE_UNKNOWN",
		1: "TUNNEL_TYPE_P2P",
		2: "TUNNEL_TYPE_P2MP",
		3: "TUNNEL_TYPE_MP2MP",
	}
	TunnelType_value = map[string]int32{
		"TUNNEL_TYPE_UNKNOWN": 0,
		"TUNNEL_TYPE_P2P":     1,
		"TUNNEL_TYPE_P2MP":    2,
		"TUNNEL_TYPE_MP2MP":   3,
	}
)

func (x TunnelType) Enum() *TunnelType {
	p := new(TunnelType)
	*p = x
	return p
}

func (x TunnelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[1].Descriptor()
}

func (TunnelType) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[1]
}

func (x TunnelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelType.Descriptor instead.
func (TunnelType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{1}
}

type LspStatus int32

const (
	LspStatus_LSP_UNKNOWN  LspStatus = 0
	LspStatus_LSP_ACTIVE   LspStatus = 1
	LspStatus_LSP_INACTIVE LspStatus = 2
	LspStatus_LSP_FAILED   LspStatus = 3
)

// Enum value maps for LspStatus.
var (
	LspStatus_name = map[int32]string{
		0: "LSP_UNKNOWN",
		1: "LSP_ACTIVE",
		2: "LSP_INACTIVE",
		3: "LSP_FAILED",
	}
	LspStatus_value = map[string]int32{
		"LSP_UNKNOWN":  0,
		"LSP_ACTIVE":   1,
		"LSP_INACTIVE": 2,
		"LSP_FAILED":   3,
	}
)

func (x LspStatus) Enum() *LspStatus {
	p := new(LspStatus)
	*p = x
	return p
}

func (x LspStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LspStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[2].Descriptor()
}

func (LspStatus) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[2]
}

func (x LspStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LspStatus.Descriptor instead.
func (LspStatus) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{2}
}

type SessionStatus int32

const (
	SessionStatus_SESSION_UNKNOWN  SessionStatus = 0
	SessionStatus_SESSION_ACTIVE   SessionStatus = 1
	SessionStatus_SESSION_INACTIVE SessionStatus = 2
	SessionStatus_SESSION_FAILED   SessionStatus = 3
)

// Enum value maps for SessionStatus.
var (
	SessionStatus_name = map[int32]string{
		0: "SESSION_UNKNOWN",
		1: "SESSION_ACTIVE",
		2: "SESSION_INACTIVE",
		3: "SESSION_FAILED",
	}
	SessionStatus_value = map[string]int32{
		"SESSION_UNKNOWN":  0,
		"SESSION_ACTIVE":   1,
		"SESSION_INACTIVE": 2,
		"SESSION_FAILED":   3,
	}
)

func (x SessionStatus) Enum() *SessionStatus {
	p := new(SessionStatus)
	*p = x
	return p
}

func (x SessionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[3].Descriptor()
}

func (SessionStatus) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[3]
}

func (x SessionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionStatus.Descriptor instead.
func (SessionStatus) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{3}
}

type ReservationStatus int32

const (
	ReservationStatus_RESERVATION_UNKNOWN  ReservationStatus = 0
	ReservationStatus_RESERVATION_ACTIVE   ReservationStatus = 1
	ReservationStatus_RESERVATION_INACTIVE ReservationStatus = 2
	ReservationStatus_RESERVATION_FAILED   ReservationStatus = 3
)

// Enum value maps for ReservationStatus.
var (
	ReservationStatus_name = map[int32]string{
		0: "RESERVATION_UNKNOWN",
		1: "RESERVATION_ACTIVE",
		2: "RESERVATION_INACTIVE",
		3: "RESERVATION_FAILED",
	}
	ReservationStatus_value = map[string]int32{
		"RESERVATION_UNKNOWN":  0,
		"RESERVATION_ACTIVE":   1,
		"RESERVATION_INACTIVE": 2,
		"RESERVATION_FAILED":   3,
	}
)

func (x ReservationStatus) Enum() *ReservationStatus {
	p := new(ReservationStatus)
	*p = x
	return p
}

func (x ReservationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReservationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[4].Descriptor()
}

func (ReservationStatus) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[4]
}

func (x ReservationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReservationStatus.Descriptor instead.
func (ReservationStatus) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{4}
}

type ActionType int32

const (
	ActionType_ACTION_UNKNOWN        ActionType = 0
	ActionType_ACTION_SET_DSCP       ActionType = 1
	ActionType_ACTION_SET_PRECEDENCE ActionType = 2
	ActionType_ACTION_POLICE         ActionType = 3
	ActionType_ACTION_SHAPE          ActionType = 4
	ActionType_ACTION_BANDWIDTH      ActionType = 5
	ActionType_ACTION_PRIORITY       ActionType = 6
	ActionType_ACTION_QUEUE_LIMIT    ActionType = 7
	ActionType_ACTION_DROP           ActionType = 8
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "ACTION_UNKNOWN",
		1: "ACTION_SET_DSCP",
		2: "ACTION_SET_PRECEDENCE",
		3: "ACTION_POLICE",
		4: "ACTION_SHAPE",
		5: "ACTION_BANDWIDTH",
		6: "ACTION_PRIORITY",
		7: "ACTION_QUEUE_LIMIT",
		8: "ACTION_DROP",
	}
	ActionType_value = map[string]int32{
		"ACTION_UNKNOWN":        0,
		"ACTION_SET_DSCP":       1,
		"ACTION_SET_PRECEDENCE": 2,
		"ACTION_POLICE":         3,
		"ACTION_SHAPE":          4,
		"ACTION_BANDWIDTH":      5,
		"ACTION_PRIORITY":       6,
		"ACTION_QUEUE_LIMIT":    7,
		"ACTION_DROP":           8,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[5].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[5]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{5}
}

// Additional Enums
type BgpPeerState int32

const (
	BgpPeerState_BGP_PEER_UNKNOWN     BgpPeerState = 0
	BgpPeerState_BGP_PEER_IDLE        BgpPeerState = 1
	BgpPeerState_BGP_PEER_CONNECT     BgpPeerState = 2
	BgpPeerState_BGP_PEER_ACTIVE      BgpPeerState = 3
	BgpPeerState_BGP_PEER_OPENSENT    BgpPeerState = 4
	BgpPeerState_BGP_PEER_OPENCONFIRM BgpPeerState = 5
	BgpPeerState_BGP_PEER_ESTABLISHED BgpPeerState = 6
)

// Enum value maps for BgpPeerState.
var (
	BgpPeerState_name = map[int32]string{
		0: "BGP_PEER_UNKNOWN",
		1: "BGP_PEER_IDLE",
		2: "BGP_PEER_CONNECT",
		3: "BGP_PEER_ACTIVE",
		4: "BGP_PEER_OPENSENT",
		5: "BGP_PEER_OPENCONFIRM",
		6: "BGP_PEER_ESTABLISHED",
	}
	BgpPeerState_value = map[string]int32{
		"BGP_PEER_UNKNOWN":     0,
		"BGP_PEER_IDLE":        1,
		"BGP_PEER_CONNECT":     2,
		"BGP_PEER_ACTIVE":      3,
		"BGP_PEER_OPENSENT":    4,
		"BGP_PEER_OPENCONFIRM": 5,
		"BGP_PEER_ESTABLISHED": 6,
	}
)

func (x BgpPeerState) Enum() *BgpPeerState {
	p := new(BgpPeerState)
	*p = x
	return p
}

func (x BgpPeerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpPeerState) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[6].Descriptor()
}

func (BgpPeerState) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[6]
}

func (x BgpPeerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpPeerState.Descriptor instead.
func (BgpPeerState) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{6}
}

type BgpPeerType int32

const (
	BgpPeerType_BGP_PEER_TYPE_UNKNOWN  BgpPeerType = 0
	BgpPeerType_BGP_PEER_TYPE_INTERNAL BgpPeerType = 1
	BgpPeerType_BGP_PEER_TYPE_EXTERNAL BgpPeerType = 2
)

// Enum value maps for BgpPeerType.
var (
	BgpPeerType_name = map[int32]string{
		0: "BGP_PEER_TYPE_UNKNOWN",
		1: "BGP_PEER_TYPE_INTERNAL",
		2: "BGP_PEER_TYPE_EXTERNAL",
	}
	BgpPeerType_value = map[string]int32{
		"BGP_PEER_TYPE_UNKNOWN":  0,
		"BGP_PEER_TYPE_INTERNAL": 1,
		"BGP_PEER_TYPE_EXTERNAL": 2,
	}
)

func (x BgpPeerType) Enum() *BgpPeerType {
	p := new(BgpPeerType)
	*p = x
	return p
}

func (x BgpPeerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpPeerType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[7].Descriptor()
}

func (BgpPeerType) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[7]
}

func (x BgpPeerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpPeerType.Descriptor instead.
func (BgpPeerType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{7}
}

type BgpOrigin int32

const (
	BgpOrigin_BGP_ORIGIN_UNKNOWN    BgpOrigin = 0
	BgpOrigin_BGP_ORIGIN_IGP        BgpOrigin = 1
	BgpOrigin_BGP_ORIGIN_EGP        BgpOrigin = 2
	BgpOrigin_BGP_ORIGIN_INCOMPLETE BgpOrigin = 3
)

// Enum value maps for BgpOrigin.
var (
	BgpOrigin_name = map[int32]string{
		0: "BGP_ORIGIN_UNKNOWN",
		1: "BGP_ORIGIN_IGP",
		2: "BGP_ORIGIN_EGP",
		3: "BGP_ORIGIN_INCOMPLETE",
	}
	BgpOrigin_value = map[string]int32{
		"BGP_ORIGIN_UNKNOWN":    0,
		"BGP_ORIGIN_IGP":        1,
		"BGP_ORIGIN_EGP":        2,
		"BGP_ORIGIN_INCOMPLETE": 3,
	}
)

func (x BgpOrigin) Enum() *BgpOrigin {
	p := new(BgpOrigin)
	*p = x
	return p
}

func (x BgpOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[8].Descriptor()
}

func (BgpOrigin) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[8]
}

func (x BgpOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpOrigin.Descriptor instead.
func (BgpOrigin) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{8}
}

type MplsLabelType int32

const (
	MplsLabelType_MPLS_LABEL_UNKNOWN MplsLabelType = 0
	MplsLabelType_MPLS_LABEL_STATIC  MplsLabelType = 1
	MplsLabelType_MPLS_LABEL_DYNAMIC MplsLabelType = 2
	MplsLabelType_MPLS_LABEL_LDP     MplsLabelType = 3
	MplsLabelType_MPLS_LABEL_RSVP    MplsLabelType = 4
	MplsLabelType_MPLS_LABEL_SR      MplsLabelType = 5
)

// Enum value maps for MplsLabelType.
var (
	MplsLabelType_name = map[int32]string{
		0: "MPLS_LABEL_UNKNOWN",
		1: "MPLS_LABEL_STATIC",
		2: "MPLS_LABEL_DYNAMIC",
		3: "MPLS_LABEL_LDP",
		4: "MPLS_LABEL_RSVP",
		5: "MPLS_LABEL_SR",
	}
	MplsLabelType_value = map[string]int32{
		"MPLS_LABEL_UNKNOWN": 0,
		"MPLS_LABEL_STATIC":  1,
		"MPLS_LABEL_DYNAMIC": 2,
		"MPLS_LABEL_LDP":     3,
		"MPLS_LABEL_RSVP":    4,
		"MPLS_LABEL_SR":      5,
	}
)

func (x MplsLabelType) Enum() *MplsLabelType {
	p := new(MplsLabelType)
	*p = x
	return p
}

func (x MplsLabelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MplsLabelType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[9].Descriptor()
}

func (MplsLabelType) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[9]
}

func (x MplsLabelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MplsLabelType.Descriptor instead.
func (MplsLabelType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{9}
}

type LdpSessionState int32

const (
	LdpSessionState_LDP_SESSION_UNKNOWN     LdpSessionState = 0
	LdpSessionState_LDP_SESSION_NONEXISTENT LdpSessionState = 1
	LdpSessionState_LDP_SESSION_INITIALIZED LdpSessionState = 2
	LdpSessionState_LDP_SESSION_OPENREC     LdpSessionState = 3
	LdpSessionState_LDP_SESSION_OPENSENT    LdpSessionState = 4
	LdpSessionState_LDP_SESSION_OPERATIONAL LdpSessionState = 5
)

// Enum value maps for LdpSessionState.
var (
	LdpSessionState_name = map[int32]string{
		0: "LDP_SESSION_UNKNOWN",
		1: "LDP_SESSION_NONEXISTENT",
		2: "LDP_SESSION_INITIALIZED",
		3: "LDP_SESSION_OPENREC",
		4: "LDP_SESSION_OPENSENT",
		5: "LDP_SESSION_OPERATIONAL",
	}
	LdpSessionState_value = map[string]int32{
		"LDP_SESSION_UNKNOWN":     0,
		"LDP_SESSION_NONEXISTENT": 1,
		"LDP_SESSION_INITIALIZED": 2,
		"LDP_SESSION_OPENREC":     3,
		"LDP_SESSION_OPENSENT":    4,
		"LDP_SESSION_OPERATIONAL": 5,
	}
)

func (x LdpSessionState) Enum() *LdpSessionState {
	p := new(LdpSessionState)
	*p = x
	return p
}

func (x LdpSessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LdpSessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[10].Descriptor()
}

func (LdpSessionState) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[10]
}

func (x LdpSessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LdpSessionState.Descriptor instead.
func (LdpSessionState) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{10}
}

type SrPolicyStatus int32

const (
	SrPolicyStatus_SR_POLICY_UNKNOWN    SrPolicyStatus = 0
	SrPolicyStatus_SR_POLICY_UP         SrPolicyStatus = 1
	SrPolicyStatus_SR_POLICY_DOWN       SrPolicyStatus = 2
	SrPolicyStatus_SR_POLICY_ADMIN_DOWN SrPolicyStatus = 3
)

// Enum value maps for SrPolicyStatus.
var (
	SrPolicyStatus_name = map[int32]string{
		0: "SR_POLICY_UNKNOWN",
		1: "SR_POLICY_UP",
		2: "SR_POLICY_DOWN",
		3: "SR_POLICY_ADMIN_DOWN",
	}
	SrPolicyStatus_value = map[string]int32{
		"SR_POLICY_UNKNOWN":    0,
		"SR_POLICY_UP":         1,
		"SR_POLICY_DOWN":       2,
		"SR_POLICY_ADMIN_DOWN": 3,
	}
)

func (x SrPolicyStatus) Enum() *SrPolicyStatus {
	p := new(SrPolicyStatus)
	*p = x
	return p
}

func (x SrPolicyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SrPolicyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[11].Descriptor()
}

func (SrPolicyStatus) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[11]
}

func (x SrPolicyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SrPolicyStatus.Descriptor instead.
func (SrPolicyStatus) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{11}
}

type SrPathStatus int32

const (
	SrPathStatus_SR_PATH_UNKNOWN  SrPathStatus = 0
	SrPathStatus_SR_PATH_ACTIVE   SrPathStatus = 1
	SrPathStatus_SR_PATH_INACTIVE SrPathStatus = 2
	SrPathStatus_SR_PATH_INVALID  SrPathStatus = 3
)

// Enum value maps for SrPathStatus.
var (
	SrPathStatus_name = map[int32]string{
		0: "SR_PATH_UNKNOWN",
		1: "SR_PATH_ACTIVE",
		2: "SR_PATH_INACTIVE",
		3: "SR_PATH_INVALID",
	}
	SrPathStatus_value = map[string]int32{
		"SR_PATH_UNKNOWN":  0,
		"SR_PATH_ACTIVE":   1,
		"SR_PATH_INACTIVE": 2,
		"SR_PATH_INVALID":  3,
	}
)

func (x SrPathStatus) Enum() *SrPathStatus {
	p := new(SrPathStatus)
	*p = x
	return p
}

func (x SrPathStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SrPathStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[12].Descriptor()
}

func (SrPathStatus) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[12]
}

func (x SrPathStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SrPathStatus.Descriptor instead.
func (SrPathStatus) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{12}
}

type SrSegmentType int32

const (
	SrSegmentType_SR_SEGMENT_UNKNOWN   SrSegmentType = 0
	SrSegmentType_SR_SEGMENT_NODE      SrSegmentType = 1
	SrSegmentType_SR_SEGMENT_ADJACENCY SrSegmentType = 2
	SrSegmentType_SR_SEGMENT_BINDING   SrSegmentType = 3
)

// Enum value maps for SrSegmentType.
var (
	SrSegmentType_name = map[int32]string{
		0: "SR_SEGMENT_UNKNOWN",
		1: "SR_SEGMENT_NODE",
		2: "SR_SEGMENT_ADJACENCY",
		3: "SR_SEGMENT_BINDING",
	}
	SrSegmentType_value = map[string]int32{
		"SR_SEGMENT_UNKNOWN":   0,
		"SR_SEGMENT_NODE":      1,
		"SR_SEGMENT_ADJACENCY": 2,
		"SR_SEGMENT_BINDING":   3,
	}
)

func (x SrSegmentType) Enum() *SrSegmentType {
	p := new(SrSegmentType)
	*p = x
	return p
}

func (x SrSegmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SrSegmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[13].Descriptor()
}

func (SrSegmentType) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[13]
}

func (x SrSegmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SrSegmentType.Descriptor instead.
func (SrSegmentType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{13}
}

// Device Application Enums
type DeviceType int32

const (
	DeviceType_DEVICE_TYPE_UNKNOWN       DeviceType = 0
	DeviceType_DEVICE_TYPE_ROUTER        DeviceType = 1
	DeviceType_DEVICE_TYPE_SWITCH        DeviceType = 2
	DeviceType_DEVICE_TYPE_FIREWALL      DeviceType = 3
	DeviceType_DEVICE_TYPE_LOAD_BALANCER DeviceType = 4
	DeviceType_DEVICE_TYPE_ACCESS_POINT  DeviceType = 5
	DeviceType_DEVICE_TYPE_SERVER        DeviceType = 6
	DeviceType_DEVICE_TYPE_STORAGE       DeviceType = 7
	DeviceType_DEVICE_TYPE_GATEWAY       DeviceType = 8
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "DEVICE_TYPE_UNKNOWN",
		1: "DEVICE_TYPE_ROUTER",
		2: "DEVICE_TYPE_SWITCH",
		3: "DEVICE_TYPE_FIREWALL",
		4: "DEVICE_TYPE_LOAD_BALANCER",
		5: "DEVICE_TYPE_ACCESS_POINT",
		6: "DEVICE_TYPE_SERVER",
		7: "DEVICE_TYPE_STORAGE",
		8: "DEVICE_TYPE_GATEWAY",
	}
	DeviceType_value = map[string]int32{
		"DEVICE_TYPE_UNKNOWN":       0,
		"DEVICE_TYPE_ROUTER":        1,
		"DEVICE_TYPE_SWITCH":        2,
		"DEVICE_TYPE_FIREWALL":      3,
		"DEVICE_TYPE_LOAD_BALANCER": 4,
		"DEVICE_TYPE_ACCESS_POINT":  5,
		"DEVICE_TYPE_SERVER":        6,
		"DEVICE_TYPE_STORAGE":       7,
		"DEVICE_TYPE_GATEWAY":       8,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[14].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[14]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{14}
}

type DeviceStatus int32

const (
	DeviceStatus_DEVICE_STATUS_UNKNOWN     DeviceStatus = 0
	DeviceStatus_DEVICE_STATUS_ONLINE      DeviceStatus = 1
	DeviceStatus_DEVICE_STATUS_OFFLINE     DeviceStatus = 2
	DeviceStatus_DEVICE_STATUS_WARNING     DeviceStatus = 3
	DeviceStatus_DEVICE_STATUS_CRITICAL    DeviceStatus = 4
	DeviceStatus_DEVICE_STATUS_MAINTENANCE DeviceStatus = 5
)

// Enum value maps for DeviceStatus.
var (
	DeviceStatus_name = map[int32]string{
		0: "DEVICE_STATUS_UNKNOWN",
		1: "DEVICE_STATUS_ONLINE",
		2: "DEVICE_STATUS_OFFLINE",
		3: "DEVICE_STATUS_WARNING",
		4: "DEVICE_STATUS_CRITICAL",
		5: "DEVICE_STATUS_MAINTENANCE",
	}
	DeviceStatus_value = map[string]int32{
		"DEVICE_STATUS_UNKNOWN":     0,
		"DEVICE_STATUS_ONLINE":      1,
		"DEVICE_STATUS_OFFLINE":     2,
		"DEVICE_STATUS_WARNING":     3,
		"DEVICE_STATUS_CRITICAL":    4,
		"DEVICE_STATUS_MAINTENANCE": 5,
	}
)

func (x DeviceStatus) Enum() *DeviceStatus {
	p := new(DeviceStatus)
	*p = x
	return p
}

func (x DeviceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[15].Descriptor()
}

func (DeviceStatus) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[15]
}

func (x DeviceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceStatus.Descriptor instead.
func (DeviceStatus) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{15}
}

type ComponentStatus int32

const (
	ComponentStatus_COMPONENT_STATUS_UNKNOWN     ComponentStatus = 0
	ComponentStatus_COMPONENT_STATUS_OK          ComponentStatus = 1
	ComponentStatus_COMPONENT_STATUS_WARNING     ComponentStatus = 2
	ComponentStatus_COMPONENT_STATUS_ERROR       ComponentStatus = 3
	ComponentStatus_COMPONENT_STATUS_CRITICAL    ComponentStatus = 4
	ComponentStatus_COMPONENT_STATUS_OFFLINE     ComponentStatus = 5
	ComponentStatus_COMPONENT_STATUS_NOT_PRESENT ComponentStatus = 6
)

// Enum value maps for ComponentStatus.
var (
	ComponentStatus_name = map[int32]string{
		0: "COMPONENT_STATUS_UNKNOWN",
		1: "COMPONENT_STATUS_OK",
		2: "COMPONENT_STATUS_WARNING",
		3: "COMPONENT_STATUS_ERROR",
		4: "COMPONENT_STATUS_CRITICAL",
		5: "COMPONENT_STATUS_OFFLINE",
		6: "COMPONENT_STATUS_NOT_PRESENT",
	}
	ComponentStatus_value = map[string]int32{
		"COMPONENT_STATUS_UNKNOWN":     0,
		"COMPONENT_STATUS_OK":          1,
		"COMPONENT_STATUS_WARNING":     2,
		"COMPONENT_STATUS_ERROR":       3,
		"COMPONENT_STATUS_CRITICAL":    4,
		"COMPONENT_STATUS_OFFLINE":     5,
		"COMPONENT_STATUS_NOT_PRESENT": 6,
	}
)

func (x ComponentStatus) Enum() *ComponentStatus {
	p := new(ComponentStatus)
	*p = x
	return p
}

func (x ComponentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComponentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[16].Descriptor()
}

func (ComponentStatus) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[16]
}

func (x ComponentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComponentStatus.Descriptor instead.
func (ComponentStatus) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{16}
}

type ModuleType int32

const (
	ModuleType_MODULE_TYPE_UNKNOWN                  ModuleType = 0
	ModuleType_MODULE_TYPE_SUPERVISOR               ModuleType = 1
	ModuleType_MODULE_TYPE_LINE_CARD                ModuleType = 2
	ModuleType_MODULE_TYPE_ROUTE_PROCESSOR          ModuleType = 3
	ModuleType_MODULE_TYPE_INTERFACE_MODULE         ModuleType = 4
	ModuleType_MODULE_TYPE_MANAGEMENT_PROCESSOR     ModuleType = 5
	ModuleType_MODULE_TYPE_SECURITY_PROCESSING_UNIT ModuleType = 6
	ModuleType_MODULE_TYPE_SERVICE_MODULE           ModuleType = 7
	ModuleType_MODULE_TYPE_FABRIC_MODULE            ModuleType = 8
)

// Enum value maps for ModuleType.
var (
	ModuleType_name = map[int32]string{
		0: "MODULE_TYPE_UNKNOWN",
		1: "MODULE_TYPE_SUPERVISOR",
		2: "MODULE_TYPE_LINE_CARD",
		3: "MODULE_TYPE_ROUTE_PROCESSOR",
		4: "MODULE_TYPE_INTERFACE_MODULE",
		5: "MODULE_TYPE_MANAGEMENT_PROCESSOR",
		6: "MODULE_TYPE_SECURITY_PROCESSING_UNIT",
		7: "MODULE_TYPE_SERVICE_MODULE",
		8: "MODULE_TYPE_FABRIC_MODULE",
	}
	ModuleType_value = map[string]int32{
		"MODULE_TYPE_UNKNOWN":                  0,
		"MODULE_TYPE_SUPERVISOR":               1,
		"MODULE_TYPE_LINE_CARD":                2,
		"MODULE_TYPE_ROUTE_PROCESSOR":          3,
		"MODULE_TYPE_INTERFACE_MODULE":         4,
		"MODULE_TYPE_MANAGEMENT_PROCESSOR":     5,
		"MODULE_TYPE_SECURITY_PROCESSING_UNIT": 6,
		"MODULE_TYPE_SERVICE_MODULE":           7,
		"MODULE_TYPE_FABRIC_MODULE":            8,
	}
)

func (x ModuleType) Enum() *ModuleType {
	p := new(ModuleType)
	*p = x
	return p
}

func (x ModuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[17].Descriptor()
}

func (ModuleType) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[17]
}

func (x ModuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModuleType.Descriptor instead.
func (ModuleType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{17}
}

type InterfaceType int32

const (
	InterfaceType_INTERFACE_TYPE_UNKNOWN          InterfaceType = 0
	InterfaceType_INTERFACE_TYPE_ETHERNET         InterfaceType = 1
	InterfaceType_INTERFACE_TYPE_FAST_ETHERNET    InterfaceType = 2
	InterfaceType_INTERFACE_TYPE_GIGABIT_ETHERNET InterfaceType = 3
	InterfaceType_INTERFACE_TYPE_10GIGE           InterfaceType = 4
	InterfaceType_INTERFACE_TYPE_25GIGE           InterfaceType = 5
	InterfaceType_INTERFACE_TYPE_40GIGE           InterfaceType = 6
	InterfaceType_INTERFACE_TYPE_100GIGE          InterfaceType = 7
	InterfaceType_INTERFACE_TYPE_SERIAL           InterfaceType = 8
	InterfaceType_INTERFACE_TYPE_ATM              InterfaceType = 9
	InterfaceType_INTERFACE_TYPE_FRAME_RELAY      InterfaceType = 10
	InterfaceType_INTERFACE_TYPE_LOOPBACK         InterfaceType = 11
	InterfaceType_INTERFACE_TYPE_MANAGEMENT       InterfaceType = 12
	InterfaceType_INTERFACE_TYPE_TUNNEL           InterfaceType = 13
	InterfaceType_INTERFACE_TYPE_VLAN             InterfaceType = 14
	InterfaceType_INTERFACE_TYPE_BRIDGE           InterfaceType = 15
)

// Enum value maps for InterfaceType.
var (
	InterfaceType_name = map[int32]string{
		0:  "INTERFACE_TYPE_UNKNOWN",
		1:  "INTERFACE_TYPE_ETHERNET",
		2:  "INTERFACE_TYPE_FAST_ETHERNET",
		3:  "INTERFACE_TYPE_GIGABIT_ETHERNET",
		4:  "INTERFACE_TYPE_10GIGE",
		5:  "INTERFACE_TYPE_25GIGE",
		6:  "INTERFACE_TYPE_40GIGE",
		7:  "INTERFACE_TYPE_100GIGE",
		8:  "INTERFACE_TYPE_SERIAL",
		9:  "INTERFACE_TYPE_ATM",
		10: "INTERFACE_TYPE_FRAME_RELAY",
		11: "INTERFACE_TYPE_LOOPBACK",
		12: "INTERFACE_TYPE_MANAGEMENT",
		13: "INTERFACE_TYPE_TUNNEL",
		14: "INTERFACE_TYPE_VLAN",
		15: "INTERFACE_TYPE_BRIDGE",
	}
	InterfaceType_value = map[string]int32{
		"INTERFACE_TYPE_UNKNOWN":          0,
		"INTERFACE_TYPE_ETHERNET":         1,
		"INTERFACE_TYPE_FAST_ETHERNET":    2,
		"INTERFACE_TYPE_GIGABIT_ETHERNET": 3,
		"INTERFACE_TYPE_10GIGE":           4,
		"INTERFACE_TYPE_25GIGE":           5,
		"INTERFACE_TYPE_40GIGE":           6,
		"INTERFACE_TYPE_100GIGE":          7,
		"INTERFACE_TYPE_SERIAL":           8,
		"INTERFACE_TYPE_ATM":              9,
		"INTERFACE_TYPE_FRAME_RELAY":      10,
		"INTERFACE_TYPE_LOOPBACK":         11,
		"INTERFACE_TYPE_MANAGEMENT":       12,
		"INTERFACE_TYPE_TUNNEL":           13,
		"INTERFACE_TYPE_VLAN":             14,
		"INTERFACE_TYPE_BRIDGE":           15,
	}
)

func (x InterfaceType) Enum() *InterfaceType {
	p := new(InterfaceType)
	*p = x
	return p
}

func (x InterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[18].Descriptor()
}

func (InterfaceType) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[18]
}

func (x InterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceType.Descriptor instead.
func (InterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{18}
}

type PowerType int32

const (
	PowerType_POWER_TYPE_UNKNOWN   PowerType = 0
	PowerType_POWER_TYPE_AC        PowerType = 1
	PowerType_POWER_TYPE_DC        PowerType = 2
	PowerType_POWER_TYPE_POE       PowerType = 3
	PowerType_POWER_TYPE_REDUNDANT PowerType = 4
	PowerType_POWER_TYPE_BATTERY   PowerType = 5
	PowerType_POWER_TYPE_SOLAR     PowerType = 6
)

// Enum value maps for PowerType.
var (
	PowerType_name = map[int32]string{
		0: "POWER_TYPE_UNKNOWN",
		1: "POWER_TYPE_AC",
		2: "POWER_TYPE_DC",
		3: "POWER_TYPE_POE",
		4: "POWER_TYPE_REDUNDANT",
		5: "POWER_TYPE_BATTERY",
		6: "POWER_TYPE_SOLAR",
	}
	PowerType_value = map[string]int32{
		"POWER_TYPE_UNKNOWN":   0,
		"POWER_TYPE_AC":        1,
		"POWER_TYPE_DC":        2,
		"POWER_TYPE_POE":       3,
		"POWER_TYPE_REDUNDANT": 4,
		"POWER_TYPE_BATTERY":   5,
		"POWER_TYPE_SOLAR":     6,
	}
)

func (x PowerType) Enum() *PowerType {
	p := new(PowerType)
	*p = x
	return p
}

func (x PowerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[19].Descriptor()
}

func (PowerType) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[19]
}

func (x PowerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerType.Descriptor instead.
func (PowerType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{19}
}

// Topology Application Enums
type TopologyType int32

const (
	TopologyType_TOPOLOGY_TYPE_UNKNOWN  TopologyType = 0
	TopologyType_TOPOLOGY_TYPE_PHYSICAL TopologyType = 1
	TopologyType_TOPOLOGY_TYPE_LOGICAL  TopologyType = 2
	TopologyType_TOPOLOGY_TYPE_L2       TopologyType = 3
	TopologyType_TOPOLOGY_TYPE_L3       TopologyType = 4
	TopologyType_TOPOLOGY_TYPE_OVERLAY  TopologyType = 5
	TopologyType_TOPOLOGY_TYPE_UNDERLAY TopologyType = 6
	TopologyType_TOPOLOGY_TYPE_SERVICE  TopologyType = 7
	TopologyType_TOPOLOGY_TYPE_GLOBAL   TopologyType = 8
)

// Enum value maps for TopologyType.
var (
	TopologyType_name = map[int32]string{
		0: "TOPOLOGY_TYPE_UNKNOWN",
		1: "TOPOLOGY_TYPE_PHYSICAL",
		2: "TOPOLOGY_TYPE_LOGICAL",
		3: "TOPOLOGY_TYPE_L2",
		4: "TOPOLOGY_TYPE_L3",
		5: "TOPOLOGY_TYPE_OVERLAY",
		6: "TOPOLOGY_TYPE_UNDERLAY",
		7: "TOPOLOGY_TYPE_SERVICE",
		8: "TOPOLOGY_TYPE_GLOBAL",
	}
	TopologyType_value = map[string]int32{
		"TOPOLOGY_TYPE_UNKNOWN":  0,
		"TOPOLOGY_TYPE_PHYSICAL": 1,
		"TOPOLOGY_TYPE_LOGICAL":  2,
		"TOPOLOGY_TYPE_L2":       3,
		"TOPOLOGY_TYPE_L3":       4,
		"TOPOLOGY_TYPE_OVERLAY":  5,
		"TOPOLOGY_TYPE_UNDERLAY": 6,
		"TOPOLOGY_TYPE_SERVICE":  7,
		"TOPOLOGY_TYPE_GLOBAL":   8,
	}
)

func (x TopologyType) Enum() *TopologyType {
	p := new(TopologyType)
	*p = x
	return p
}

func (x TopologyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopologyType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[20].Descriptor()
}

func (TopologyType) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[20]
}

func (x TopologyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopologyType.Descriptor instead.
func (TopologyType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{20}
}

type NetworkNodeType int32

const (
	NetworkNodeType_NETWORK_NODE_TYPE_UNKNOWN       NetworkNodeType = 0
	NetworkNodeType_NETWORK_NODE_TYPE_ROUTER        NetworkNodeType = 1
	NetworkNodeType_NETWORK_NODE_TYPE_SWITCH        NetworkNodeType = 2
	NetworkNodeType_NETWORK_NODE_TYPE_FIREWALL      NetworkNodeType = 3
	NetworkNodeType_NETWORK_NODE_TYPE_SERVER        NetworkNodeType = 4
	NetworkNodeType_NETWORK_NODE_TYPE_LOAD_BALANCER NetworkNodeType = 5
	NetworkNodeType_NETWORK_NODE_TYPE_GATEWAY       NetworkNodeType = 6
	NetworkNodeType_NETWORK_NODE_TYPE_ACCESS_POINT  NetworkNodeType = 7
	NetworkNodeType_NETWORK_NODE_TYPE_CONTROLLER    NetworkNodeType = 8
	NetworkNodeType_NETWORK_NODE_TYPE_ENDPOINT      NetworkNodeType = 9
)

// Enum value maps for NetworkNodeType.
var (
	NetworkNodeType_name = map[int32]string{
		0: "NETWORK_NODE_TYPE_UNKNOWN",
		1: "NETWORK_NODE_TYPE_ROUTER",
		2: "NETWORK_NODE_TYPE_SWITCH",
		3: "NETWORK_NODE_TYPE_FIREWALL",
		4: "NETWORK_NODE_TYPE_SERVER",
		5: "NETWORK_NODE_TYPE_LOAD_BALANCER",
		6: "NETWORK_NODE_TYPE_GATEWAY",
		7: "NETWORK_NODE_TYPE_ACCESS_POINT",
		8: "NETWORK_NODE_TYPE_CONTROLLER",
		9: "NETWORK_NODE_TYPE_ENDPOINT",
	}
	NetworkNodeType_value = map[string]int32{
		"NETWORK_NODE_TYPE_UNKNOWN":       0,
		"NETWORK_NODE_TYPE_ROUTER":        1,
		"NETWORK_NODE_TYPE_SWITCH":        2,
		"NETWORK_NODE_TYPE_FIREWALL":      3,
		"NETWORK_NODE_TYPE_SERVER":        4,
		"NETWORK_NODE_TYPE_LOAD_BALANCER": 5,
		"NETWORK_NODE_TYPE_GATEWAY":       6,
		"NETWORK_NODE_TYPE_ACCESS_POINT":  7,
		"NETWORK_NODE_TYPE_CONTROLLER":    8,
		"NETWORK_NODE_TYPE_ENDPOINT":      9,
	}
)

func (x NetworkNodeType) Enum() *NetworkNodeType {
	p := new(NetworkNodeType)
	*p = x
	return p
}

func (x NetworkNodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkNodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[21].Descriptor()
}

func (NetworkNodeType) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[21]
}

func (x NetworkNodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkNodeType.Descriptor instead.
func (NetworkNodeType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{21}
}

type NetworkNodeStatus int32

const (
	NetworkNodeStatus_NODE_STATUS_UNKNOWN     NetworkNodeStatus = 0
	NetworkNodeStatus_NODE_STATUS_ONLINE      NetworkNodeStatus = 1
	NetworkNodeStatus_NODE_STATUS_OFFLINE     NetworkNodeStatus = 2
	NetworkNodeStatus_NODE_STATUS_WARNING     NetworkNodeStatus = 3
	NetworkNodeStatus_NODE_STATUS_CRITICAL    NetworkNodeStatus = 4
	NetworkNodeStatus_NODE_STATUS_MAINTENANCE NetworkNodeStatus = 5
	NetworkNodeStatus_NODE_STATUS_UNREACHABLE NetworkNodeStatus = 6
)

// Enum value maps for NetworkNodeStatus.
var (
	NetworkNodeStatus_name = map[int32]string{
		0: "NODE_STATUS_UNKNOWN",
		1: "NODE_STATUS_ONLINE",
		2: "NODE_STATUS_OFFLINE",
		3: "NODE_STATUS_WARNING",
		4: "NODE_STATUS_CRITICAL",
		5: "NODE_STATUS_MAINTENANCE",
		6: "NODE_STATUS_UNREACHABLE",
	}
	NetworkNodeStatus_value = map[string]int32{
		"NODE_STATUS_UNKNOWN":     0,
		"NODE_STATUS_ONLINE":      1,
		"NODE_STATUS_OFFLINE":     2,
		"NODE_STATUS_WARNING":     3,
		"NODE_STATUS_CRITICAL":    4,
		"NODE_STATUS_MAINTENANCE": 5,
		"NODE_STATUS_UNREACHABLE": 6,
	}
)

func (x NetworkNodeStatus) Enum() *NetworkNodeStatus {
	p := new(NetworkNodeStatus)
	*p = x
	return p
}

func (x NetworkNodeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkNodeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[22].Descriptor()
}

func (NetworkNodeStatus) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[22]
}

func (x NetworkNodeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkNodeStatus.Descriptor instead.
func (NetworkNodeStatus) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{22}
}

type LinkStatus int32

const (
	LinkStatus_LINK_STATUS_UNKNOWN     LinkStatus = 0
	LinkStatus_LINK_STATUS_ACTIVE      LinkStatus = 1
	LinkStatus_LINK_STATUS_INACTIVE    LinkStatus = 2
	LinkStatus_LINK_STATUS_WARNING     LinkStatus = 3
	LinkStatus_LINK_STATUS_DOWN        LinkStatus = 4
	LinkStatus_LINK_STATUS_CONGESTED   LinkStatus = 5
	LinkStatus_LINK_STATUS_MAINTENANCE LinkStatus = 6
)

// Enum value maps for LinkStatus.
var (
	LinkStatus_name = map[int32]string{
		0: "LINK_STATUS_UNKNOWN",
		1: "LINK_STATUS_ACTIVE",
		2: "LINK_STATUS_INACTIVE",
		3: "LINK_STATUS_WARNING",
		4: "LINK_STATUS_DOWN",
		5: "LINK_STATUS_CONGESTED",
		6: "LINK_STATUS_MAINTENANCE",
	}
	LinkStatus_value = map[string]int32{
		"LINK_STATUS_UNKNOWN":     0,
		"LINK_STATUS_ACTIVE":      1,
		"LINK_STATUS_INACTIVE":    2,
		"LINK_STATUS_WARNING":     3,
		"LINK_STATUS_DOWN":        4,
		"LINK_STATUS_CONGESTED":   5,
		"LINK_STATUS_MAINTENANCE": 6,
	}
)

func (x LinkStatus) Enum() *LinkStatus {
	p := new(LinkStatus)
	*p = x
	return p
}

func (x LinkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[23].Descriptor()
}

func (LinkStatus) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[23]
}

func (x LinkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkStatus.Descriptor instead.
func (LinkStatus) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{23}
}

type LinkType int32

const (
	LinkType_LINK_TYPE_UNKNOWN   LinkType = 0
	LinkType_LINK_TYPE_ETHERNET  LinkType = 1
	LinkType_LINK_TYPE_FIBER     LinkType = 2
	LinkType_LINK_TYPE_WIRELESS  LinkType = 3
	LinkType_LINK_TYPE_SATELLITE LinkType = 4
	LinkType_LINK_TYPE_COPPER    LinkType = 5
	LinkType_LINK_TYPE_VPN       LinkType = 6
	LinkType_LINK_TYPE_VIRTUAL   LinkType = 7
	LinkType_LINK_TYPE_WAN       LinkType = 8
	LinkType_LINK_TYPE_LAN       LinkType = 9
	LinkType_LINK_TYPE_BACKBONE  LinkType = 10
)

// Enum value maps for LinkType.
var (
	LinkType_name = map[int32]string{
		0:  "LINK_TYPE_UNKNOWN",
		1:  "LINK_TYPE_ETHERNET",
		2:  "LINK_TYPE_FIBER",
		3:  "LINK_TYPE_WIRELESS",
		4:  "LINK_TYPE_SATELLITE",
		5:  "LINK_TYPE_COPPER",
		6:  "LINK_TYPE_VPN",
		7:  "LINK_TYPE_VIRTUAL",
		8:  "LINK_TYPE_WAN",
		9:  "LINK_TYPE_LAN",
		10: "LINK_TYPE_BACKBONE",
	}
	LinkType_value = map[string]int32{
		"LINK_TYPE_UNKNOWN":   0,
		"LINK_TYPE_ETHERNET":  1,
		"LINK_TYPE_FIBER":     2,
		"LINK_TYPE_WIRELESS":  3,
		"LINK_TYPE_SATELLITE": 4,
		"LINK_TYPE_COPPER":    5,
		"LINK_TYPE_VPN":       6,
		"LINK_TYPE_VIRTUAL":   7,
		"LINK_TYPE_WAN":       8,
		"LINK_TYPE_LAN":       9,
		"LINK_TYPE_BACKBONE":  10,
	}
)

func (x LinkType) Enum() *LinkType {
	p := new(LinkType)
	*p = x
	return p
}

func (x LinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[24].Descriptor()
}

func (LinkType) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[24]
}

func (x LinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkType.Descriptor instead.
func (LinkType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{24}
}

type EdgeType int32

const (
	EdgeType_EDGE_TYPE_UNKNOWN    EdgeType = 0
	EdgeType_EDGE_TYPE_PHYSICAL   EdgeType = 1
	EdgeType_EDGE_TYPE_LOGICAL    EdgeType = 2
	EdgeType_EDGE_TYPE_VIRTUAL    EdgeType = 3
	EdgeType_EDGE_TYPE_AGGREGATED EdgeType = 4
	EdgeType_EDGE_TYPE_BACKUP     EdgeType = 5
	EdgeType_EDGE_TYPE_PRIMARY    EdgeType = 6
)

// Enum value maps for EdgeType.
var (
	EdgeType_name = map[int32]string{
		0: "EDGE_TYPE_UNKNOWN",
		1: "EDGE_TYPE_PHYSICAL",
		2: "EDGE_TYPE_LOGICAL",
		3: "EDGE_TYPE_VIRTUAL",
		4: "EDGE_TYPE_AGGREGATED",
		5: "EDGE_TYPE_BACKUP",
		6: "EDGE_TYPE_PRIMARY",
	}
	EdgeType_value = map[string]int32{
		"EDGE_TYPE_UNKNOWN":    0,
		"EDGE_TYPE_PHYSICAL":   1,
		"EDGE_TYPE_LOGICAL":    2,
		"EDGE_TYPE_VIRTUAL":    3,
		"EDGE_TYPE_AGGREGATED": 4,
		"EDGE_TYPE_BACKUP":     5,
		"EDGE_TYPE_PRIMARY":    6,
	}
)

func (x EdgeType) Enum() *EdgeType {
	p := new(EdgeType)
	*p = x
	return p
}

func (x EdgeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[25].Descriptor()
}

func (EdgeType) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[25]
}

func (x EdgeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EdgeType.Descriptor instead.
func (EdgeType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{25}
}

type EdgeStatus int32

const (
	EdgeStatus_EDGE_STATUS_UNKNOWN  EdgeStatus = 0
	EdgeStatus_EDGE_STATUS_UP       EdgeStatus = 1
	EdgeStatus_EDGE_STATUS_DOWN     EdgeStatus = 2
	EdgeStatus_EDGE_STATUS_WARNING  EdgeStatus = 3
	EdgeStatus_EDGE_STATUS_CRITICAL EdgeStatus = 4
	EdgeStatus_EDGE_STATUS_FLAPPING EdgeStatus = 5
)

// Enum value maps for EdgeStatus.
var (
	EdgeStatus_name = map[int32]string{
		0: "EDGE_STATUS_UNKNOWN",
		1: "EDGE_STATUS_UP",
		2: "EDGE_STATUS_DOWN",
		3: "EDGE_STATUS_WARNING",
		4: "EDGE_STATUS_CRITICAL",
		5: "EDGE_STATUS_FLAPPING",
	}
	EdgeStatus_value = map[string]int32{
		"EDGE_STATUS_UNKNOWN":  0,
		"EDGE_STATUS_UP":       1,
		"EDGE_STATUS_DOWN":     2,
		"EDGE_STATUS_WARNING":  3,
		"EDGE_STATUS_CRITICAL": 4,
		"EDGE_STATUS_FLAPPING": 5,
	}
)

func (x EdgeStatus) Enum() *EdgeStatus {
	p := new(EdgeStatus)
	*p = x
	return p
}

func (x EdgeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[26].Descriptor()
}

func (EdgeStatus) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[26]
}

func (x EdgeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EdgeStatus.Descriptor instead.
func (EdgeStatus) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{26}
}

type PathType int32

const (
	PathType_PATH_TYPE_UNKNOWN       PathType = 0
	PathType_PATH_TYPE_DIRECT        PathType = 1
	PathType_PATH_TYPE_REDUNDANT     PathType = 2
	PathType_PATH_TYPE_BACKUP        PathType = 3
	PathType_PATH_TYPE_LOAD_BALANCED PathType = 4
	PathType_PATH_TYPE_SHORTEST      PathType = 5
	PathType_PATH_TYPE_FASTEST       PathType = 6
	PathType_PATH_TYPE_CHEAPEST      PathType = 7
)

// Enum value maps for PathType.
var (
	PathType_name = map[int32]string{
		0: "PATH_TYPE_UNKNOWN",
		1: "PATH_TYPE_DIRECT",
		2: "PATH_TYPE_REDUNDANT",
		3: "PATH_TYPE_BACKUP",
		4: "PATH_TYPE_LOAD_BALANCED",
		5: "PATH_TYPE_SHORTEST",
		6: "PATH_TYPE_FASTEST",
		7: "PATH_TYPE_CHEAPEST",
	}
	PathType_value = map[string]int32{
		"PATH_TYPE_UNKNOWN":       0,
		"PATH_TYPE_DIRECT":        1,
		"PATH_TYPE_REDUNDANT":     2,
		"PATH_TYPE_BACKUP":        3,
		"PATH_TYPE_LOAD_BALANCED": 4,
		"PATH_TYPE_SHORTEST":      5,
		"PATH_TYPE_FASTEST":       6,
		"PATH_TYPE_CHEAPEST":      7,
	}
)

func (x PathType) Enum() *PathType {
	p := new(PathType)
	*p = x
	return p
}

func (x PathType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PathType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[27].Descriptor()
}

func (PathType) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[27]
}

func (x PathType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PathType.Descriptor instead.
func (PathType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{27}
}

type RegionType int32

const (
	RegionType_REGION_TYPE_UNKNOWN    RegionType = 0
	RegionType_REGION_TYPE_CONTINENT  RegionType = 1
	RegionType_REGION_TYPE_COUNTRY    RegionType = 2
	RegionType_REGION_TYPE_STATE      RegionType = 3
	RegionType_REGION_TYPE_CITY       RegionType = 4
	RegionType_REGION_TYPE_DATACENTER RegionType = 5
	RegionType_REGION_TYPE_CAMPUS     RegionType = 6
	RegionType_REGION_TYPE_BUILDING   RegionType = 7
	RegionType_REGION_TYPE_FLOOR      RegionType = 8
	RegionType_REGION_TYPE_RACK       RegionType = 9
)

// Enum value maps for RegionType.
var (
	RegionType_name = map[int32]string{
		0: "REGION_TYPE_UNKNOWN",
		1: "REGION_TYPE_CONTINENT",
		2: "REGION_TYPE_COUNTRY",
		3: "REGION_TYPE_STATE",
		4: "REGION_TYPE_CITY",
		5: "REGION_TYPE_DATACENTER",
		6: "REGION_TYPE_CAMPUS",
		7: "REGION_TYPE_BUILDING",
		8: "REGION_TYPE_FLOOR",
		9: "REGION_TYPE_RACK",
	}
	RegionType_value = map[string]int32{
		"REGION_TYPE_UNKNOWN":    0,
		"REGION_TYPE_CONTINENT":  1,
		"REGION_TYPE_COUNTRY":    2,
		"REGION_TYPE_STATE":      3,
		"REGION_TYPE_CITY":       4,
		"REGION_TYPE_DATACENTER": 5,
		"REGION_TYPE_CAMPUS":     6,
		"REGION_TYPE_BUILDING":   7,
		"REGION_TYPE_FLOOR":      8,
		"REGION_TYPE_RACK":       9,
	}
)

func (x RegionType) Enum() *RegionType {
	p := new(RegionType)
	*p = x
	return p
}

func (x RegionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegionType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[28].Descriptor()
}

func (RegionType) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[28]
}

func (x RegionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegionType.Descriptor instead.
func (RegionType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{28}
}

type HealthStatus int32

const (
	HealthStatus_HEALTH_STATUS_UNKNOWN     HealthStatus = 0
	HealthStatus_HEALTH_STATUS_HEALTHY     HealthStatus = 1
	HealthStatus_HEALTH_STATUS_WARNING     HealthStatus = 2
	HealthStatus_HEALTH_STATUS_CRITICAL    HealthStatus = 3
	HealthStatus_HEALTH_STATUS_FAILED      HealthStatus = 4
	HealthStatus_HEALTH_STATUS_DEGRADED    HealthStatus = 5
	HealthStatus_HEALTH_STATUS_MAINTENANCE HealthStatus = 6
)

// Enum value maps for HealthStatus.
var (
	HealthStatus_name = map[int32]string{
		0: "HEALTH_STATUS_UNKNOWN",
		1: "HEALTH_STATUS_HEALTHY",
		2: "HEALTH_STATUS_WARNING",
		3: "HEALTH_STATUS_CRITICAL",
		4: "HEALTH_STATUS_FAILED",
		5: "HEALTH_STATUS_DEGRADED",
		6: "HEALTH_STATUS_MAINTENANCE",
	}
	HealthStatus_value = map[string]int32{
		"HEALTH_STATUS_UNKNOWN":     0,
		"HEALTH_STATUS_HEALTHY":     1,
		"HEALTH_STATUS_WARNING":     2,
		"HEALTH_STATUS_CRITICAL":    3,
		"HEALTH_STATUS_FAILED":      4,
		"HEALTH_STATUS_DEGRADED":    5,
		"HEALTH_STATUS_MAINTENANCE": 6,
	}
)

func (x HealthStatus) Enum() *HealthStatus {
	p := new(HealthStatus)
	*p = x
	return p
}

func (x HealthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[29].Descriptor()
}

func (HealthStatus) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[29]
}

func (x HealthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthStatus.Descriptor instead.
func (HealthStatus) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{29}
}

type InterfaceStatus int32

const (
	InterfaceStatus_INTERFACE_STATUS_UNKNOWN          InterfaceStatus = 0
	InterfaceStatus_INTERFACE_STATUS_UP               InterfaceStatus = 1
	InterfaceStatus_INTERFACE_STATUS_DOWN             InterfaceStatus = 2
	InterfaceStatus_INTERFACE_STATUS_ADMIN_DOWN       InterfaceStatus = 3
	InterfaceStatus_INTERFACE_STATUS_TESTING          InterfaceStatus = 4
	InterfaceStatus_INTERFACE_STATUS_DORMANT          InterfaceStatus = 5
	InterfaceStatus_INTERFACE_STATUS_NOT_PRESENT      InterfaceStatus = 6
	InterfaceStatus_INTERFACE_STATUS_LOWER_LAYER_DOWN InterfaceStatus = 7
)

// Enum value maps for InterfaceStatus.
var (
	InterfaceStatus_name = map[int32]string{
		0: "INTERFACE_STATUS_UNKNOWN",
		1: "INTERFACE_STATUS_UP",
		2: "INTERFACE_STATUS_DOWN",
		3: "INTERFACE_STATUS_ADMIN_DOWN",
		4: "INTERFACE_STATUS_TESTING",
		5: "INTERFACE_STATUS_DORMANT",
		6: "INTERFACE_STATUS_NOT_PRESENT",
		7: "INTERFACE_STATUS_LOWER_LAYER_DOWN",
	}
	InterfaceStatus_value = map[string]int32{
		"INTERFACE_STATUS_UNKNOWN":          0,
		"INTERFACE_STATUS_UP":               1,
		"INTERFACE_STATUS_DOWN":             2,
		"INTERFACE_STATUS_ADMIN_DOWN":       3,
		"INTERFACE_STATUS_TESTING":          4,
		"INTERFACE_STATUS_DORMANT":          5,
		"INTERFACE_STATUS_NOT_PRESENT":      6,
		"INTERFACE_STATUS_LOWER_LAYER_DOWN": 7,
	}
)

func (x InterfaceStatus) Enum() *InterfaceStatus {
	p := new(InterfaceStatus)
	*p = x
	return p
}

func (x InterfaceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[30].Descriptor()
}

func (InterfaceStatus) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[30]
}

func (x InterfaceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceStatus.Descriptor instead.
func (InterfaceStatus) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{30}
}

type AlertSeverity int32

const (
	AlertSeverity_ALERT_SEVERITY_UNKNOWN   AlertSeverity = 0
	AlertSeverity_ALERT_SEVERITY_INFO      AlertSeverity = 1
	AlertSeverity_ALERT_SEVERITY_WARNING   AlertSeverity = 2
	AlertSeverity_ALERT_SEVERITY_MAJOR     AlertSeverity = 3
	AlertSeverity_ALERT_SEVERITY_CRITICAL  AlertSeverity = 4
	AlertSeverity_ALERT_SEVERITY_EMERGENCY AlertSeverity = 5
)

// Enum value maps for AlertSeverity.
var (
	AlertSeverity_name = map[int32]string{
		0: "ALERT_SEVERITY_UNKNOWN",
		1: "ALERT_SEVERITY_INFO",
		2: "ALERT_SEVERITY_WARNING",
		3: "ALERT_SEVERITY_MAJOR",
		4: "ALERT_SEVERITY_CRITICAL",
		5: "ALERT_SEVERITY_EMERGENCY",
	}
	AlertSeverity_value = map[string]int32{
		"ALERT_SEVERITY_UNKNOWN":   0,
		"ALERT_SEVERITY_INFO":      1,
		"ALERT_SEVERITY_WARNING":   2,
		"ALERT_SEVERITY_MAJOR":     3,
		"ALERT_SEVERITY_CRITICAL":  4,
		"ALERT_SEVERITY_EMERGENCY": 5,
	}
)

func (x AlertSeverity) Enum() *AlertSeverity {
	p := new(AlertSeverity)
	*p = x
	return p
}

func (x AlertSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlertSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[31].Descriptor()
}

func (AlertSeverity) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[31]
}

func (x AlertSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlertSeverity.Descriptor instead.
func (AlertSeverity) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{31}
}

type ComponentType int32

const (
	ComponentType_COMPONENT_TYPE_UNKNOWN     ComponentType = 0
	ComponentType_COMPONENT_TYPE_DEVICE      ComponentType = 1
	ComponentType_COMPONENT_TYPE_INTERFACE   ComponentType = 2
	ComponentType_COMPONENT_TYPE_LINK        ComponentType = 3
	ComponentType_COMPONENT_TYPE_SERVICE     ComponentType = 4
	ComponentType_COMPONENT_TYPE_APPLICATION ComponentType = 5
	ComponentType_COMPONENT_TYPE_NETWORK     ComponentType = 6
	ComponentType_COMPONENT_TYPE_REGION      ComponentType = 7
)

// Enum value maps for ComponentType.
var (
	ComponentType_name = map[int32]string{
		0: "COMPONENT_TYPE_UNKNOWN",
		1: "COMPONENT_TYPE_DEVICE",
		2: "COMPONENT_TYPE_INTERFACE",
		3: "COMPONENT_TYPE_LINK",
		4: "COMPONENT_TYPE_SERVICE",
		5: "COMPONENT_TYPE_APPLICATION",
		6: "COMPONENT_TYPE_NETWORK",
		7: "COMPONENT_TYPE_REGION",
	}
	ComponentType_value = map[string]int32{
		"COMPONENT_TYPE_UNKNOWN":     0,
		"COMPONENT_TYPE_DEVICE":      1,
		"COMPONENT_TYPE_INTERFACE":   2,
		"COMPONENT_TYPE_LINK":        3,
		"COMPONENT_TYPE_SERVICE":     4,
		"COMPONENT_TYPE_APPLICATION": 5,
		"COMPONENT_TYPE_NETWORK":     6,
		"COMPONENT_TYPE_REGION":      7,
	}
)

func (x ComponentType) Enum() *ComponentType {
	p := new(ComponentType)
	*p = x
	return p
}

func (x ComponentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComponentType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[32].Descriptor()
}

func (ComponentType) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[32]
}

func (x ComponentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComponentType.Descriptor instead.
func (ComponentType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{32}
}

type IssueSeverity int32

const (
	IssueSeverity_ISSUE_SEVERITY_UNKNOWN  IssueSeverity = 0
	IssueSeverity_ISSUE_SEVERITY_LOW      IssueSeverity = 1
	IssueSeverity_ISSUE_SEVERITY_MEDIUM   IssueSeverity = 2
	IssueSeverity_ISSUE_SEVERITY_HIGH     IssueSeverity = 3
	IssueSeverity_ISSUE_SEVERITY_CRITICAL IssueSeverity = 4
)

// Enum value maps for IssueSeverity.
var (
	IssueSeverity_name = map[int32]string{
		0: "ISSUE_SEVERITY_UNKNOWN",
		1: "ISSUE_SEVERITY_LOW",
		2: "ISSUE_SEVERITY_MEDIUM",
		3: "ISSUE_SEVERITY_HIGH",
		4: "ISSUE_SEVERITY_CRITICAL",
	}
	IssueSeverity_value = map[string]int32{
		"ISSUE_SEVERITY_UNKNOWN":  0,
		"ISSUE_SEVERITY_LOW":      1,
		"ISSUE_SEVERITY_MEDIUM":   2,
		"ISSUE_SEVERITY_HIGH":     3,
		"ISSUE_SEVERITY_CRITICAL": 4,
	}
)

func (x IssueSeverity) Enum() *IssueSeverity {
	p := new(IssueSeverity)
	*p = x
	return p
}

func (x IssueSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[33].Descriptor()
}

func (IssueSeverity) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[33]
}

func (x IssueSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueSeverity.Descriptor instead.
func (IssueSeverity) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{33}
}

type IssueCategory int32

const (
	IssueCategory_ISSUE_CATEGORY_UNKNOWN       IssueCategory = 0
	IssueCategory_ISSUE_CATEGORY_CONNECTIVITY  IssueCategory = 1
	IssueCategory_ISSUE_CATEGORY_PERFORMANCE   IssueCategory = 2
	IssueCategory_ISSUE_CATEGORY_SECURITY      IssueCategory = 3
	IssueCategory_ISSUE_CATEGORY_CONFIGURATION IssueCategory = 4
	IssueCategory_ISSUE_CATEGORY_HARDWARE      IssueCategory = 5
	IssueCategory_ISSUE_CATEGORY_SOFTWARE      IssueCategory = 6
	IssueCategory_ISSUE_CATEGORY_CAPACITY      IssueCategory = 7
)

// Enum value maps for IssueCategory.
var (
	IssueCategory_name = map[int32]string{
		0: "ISSUE_CATEGORY_UNKNOWN",
		1: "ISSUE_CATEGORY_CONNECTIVITY",
		2: "ISSUE_CATEGORY_PERFORMANCE",
		3: "ISSUE_CATEGORY_SECURITY",
		4: "ISSUE_CATEGORY_CONFIGURATION",
		5: "ISSUE_CATEGORY_HARDWARE",
		6: "ISSUE_CATEGORY_SOFTWARE",
		7: "ISSUE_CATEGORY_CAPACITY",
	}
	IssueCategory_value = map[string]int32{
		"ISSUE_CATEGORY_UNKNOWN":       0,
		"ISSUE_CATEGORY_CONNECTIVITY":  1,
		"ISSUE_CATEGORY_PERFORMANCE":   2,
		"ISSUE_CATEGORY_SECURITY":      3,
		"ISSUE_CATEGORY_CONFIGURATION": 4,
		"ISSUE_CATEGORY_HARDWARE":      5,
		"ISSUE_CATEGORY_SOFTWARE":      6,
		"ISSUE_CATEGORY_CAPACITY":      7,
	}
)

func (x IssueCategory) Enum() *IssueCategory {
	p := new(IssueCategory)
	*p = x
	return p
}

func (x IssueCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[34].Descriptor()
}

func (IssueCategory) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[34]
}

func (x IssueCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueCategory.Descriptor instead.
func (IssueCategory) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{34}
}

type RecommendationType int32

const (
	RecommendationType_RECOMMENDATION_TYPE_UNKNOWN      RecommendationType = 0
	RecommendationType_RECOMMENDATION_TYPE_PREVENTIVE   RecommendationType = 1
	RecommendationType_RECOMMENDATION_TYPE_CORRECTIVE   RecommendationType = 2
	RecommendationType_RECOMMENDATION_TYPE_OPTIMIZATION RecommendationType = 3
	RecommendationType_RECOMMENDATION_TYPE_SECURITY     RecommendationType = 4
	RecommendationType_RECOMMENDATION_TYPE_UPGRADE      RecommendationType = 5
	RecommendationType_RECOMMENDATION_TYPE_MAINTENANCE  RecommendationType = 6
)

// Enum value maps for RecommendationType.
var (
	RecommendationType_name = map[int32]string{
		0: "RECOMMENDATION_TYPE_UNKNOWN",
		1: "RECOMMENDATION_TYPE_PREVENTIVE",
		2: "RECOMMENDATION_TYPE_CORRECTIVE",
		3: "RECOMMENDATION_TYPE_OPTIMIZATION",
		4: "RECOMMENDATION_TYPE_SECURITY",
		5: "RECOMMENDATION_TYPE_UPGRADE",
		6: "RECOMMENDATION_TYPE_MAINTENANCE",
	}
	RecommendationType_value = map[string]int32{
		"RECOMMENDATION_TYPE_UNKNOWN":      0,
		"RECOMMENDATION_TYPE_PREVENTIVE":   1,
		"RECOMMENDATION_TYPE_CORRECTIVE":   2,
		"RECOMMENDATION_TYPE_OPTIMIZATION": 3,
		"RECOMMENDATION_TYPE_SECURITY":     4,
		"RECOMMENDATION_TYPE_UPGRADE":      5,
		"RECOMMENDATION_TYPE_MAINTENANCE":  6,
	}
)

func (x RecommendationType) Enum() *RecommendationType {
	p := new(RecommendationType)
	*p = x
	return p
}

func (x RecommendationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecommendationType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[35].Descriptor()
}

func (RecommendationType) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[35]
}

func (x RecommendationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecommendationType.Descriptor instead.
func (RecommendationType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{35}
}

type RecommendationPriority int32

const (
	RecommendationPriority_RECOMMENDATION_PRIORITY_UNKNOWN RecommendationPriority = 0
	RecommendationPriority_RECOMMENDATION_PRIORITY_LOW     RecommendationPriority = 1
	RecommendationPriority_RECOMMENDATION_PRIORITY_MEDIUM  RecommendationPriority = 2
	RecommendationPriority_RECOMMENDATION_PRIORITY_HIGH    RecommendationPriority = 3
	RecommendationPriority_RECOMMENDATION_PRIORITY_URGENT  RecommendationPriority = 4
)

// Enum value maps for RecommendationPriority.
var (
	RecommendationPriority_name = map[int32]string{
		0: "RECOMMENDATION_PRIORITY_UNKNOWN",
		1: "RECOMMENDATION_PRIORITY_LOW",
		2: "RECOMMENDATION_PRIORITY_MEDIUM",
		3: "RECOMMENDATION_PRIORITY_HIGH",
		4: "RECOMMENDATION_PRIORITY_URGENT",
	}
	RecommendationPriority_value = map[string]int32{
		"RECOMMENDATION_PRIORITY_UNKNOWN": 0,
		"RECOMMENDATION_PRIORITY_LOW":     1,
		"RECOMMENDATION_PRIORITY_MEDIUM":  2,
		"RECOMMENDATION_PRIORITY_HIGH":    3,
		"RECOMMENDATION_PRIORITY_URGENT":  4,
	}
)

func (x RecommendationPriority) Enum() *RecommendationPriority {
	p := new(RecommendationPriority)
	*p = x
	return p
}

func (x RecommendationPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecommendationPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_proto_enumTypes[36].Descriptor()
}

func (RecommendationPriority) Type() protoreflect.EnumType {
	return &file_inventory_proto_enumTypes[36]
}

func (x RecommendationPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecommendationPriority.Descriptor instead.
func (RecommendationPriority) EnumDescriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{36}
}

type NetworkDeviceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*NetworkDevice `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *NetworkDeviceList) Reset() {
	*x = NetworkDeviceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkDeviceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkDeviceList) ProtoMessage() {}

func (x *NetworkDeviceList) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkDeviceList.ProtoReflect.Descriptor instead.
func (*NetworkDeviceList) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkDeviceList) GetList() []*NetworkDevice {
	if x != nil {
		return x.List
	}
	return nil
}

type NetworkDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Equipmentinfo *EquipmentInfo       `protobuf:"bytes,2,opt,name=equipmentinfo,proto3" json:"equipmentinfo,omitempty"`
	Physicals     map[string]*Physical `protobuf:"bytes,3,rep,name=physicals,proto3" json:"physicals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Logicals      map[string]*Logical  `protobuf:"bytes,4,rep,name=logicals,proto3" json:"logicals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Topology application support
	Topology      *NetworkTopology `protobuf:"bytes,5,opt,name=topology,proto3" json:"topology,omitempty"`
	NetworkLinks  []*NetworkLink   `protobuf:"bytes,6,rep,name=network_links,json=networkLinks,proto3" json:"network_links,omitempty"`
	NetworkHealth *NetworkHealth   `protobuf:"bytes,7,opt,name=network_health,json=networkHealth,proto3" json:"network_health,omitempty"`
}

func (x *NetworkDevice) Reset() {
	*x = NetworkDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkDevice) ProtoMessage() {}

func (x *NetworkDevice) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkDevice.ProtoReflect.Descriptor instead.
func (*NetworkDevice) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{1}
}

func (x *NetworkDevice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NetworkDevice) GetEquipmentinfo() *EquipmentInfo {
	if x != nil {
		return x.Equipmentinfo
	}
	return nil
}

func (x *NetworkDevice) GetPhysicals() map[string]*Physical {
	if x != nil {
		return x.Physicals
	}
	return nil
}

func (x *NetworkDevice) GetLogicals() map[string]*Logical {
	if x != nil {
		return x.Logicals
	}
	return nil
}

func (x *NetworkDevice) GetTopology() *NetworkTopology {
	if x != nil {
		return x.Topology
	}
	return nil
}

func (x *NetworkDevice) GetNetworkLinks() []*NetworkLink {
	if x != nil {
		return x.NetworkLinks
	}
	return nil
}

func (x *NetworkDevice) GetNetworkHealth() *NetworkHealth {
	if x != nil {
		return x.NetworkHealth
	}
	return nil
}

type EquipmentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor   string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Series   string `protobuf:"bytes,2,opt,name=series,proto3" json:"series,omitempty"`
	Family   string `protobuf:"bytes,3,opt,name=family,proto3" json:"family,omitempty"`
	Software string `protobuf:"bytes,4,opt,name=software,proto3" json:"software,omitempty"`
	Hardware string `protobuf:"bytes,5,opt,name=hardware,proto3" json:"hardware,omitempty"`
	Version  string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	SysName  string `protobuf:"bytes,7,opt,name=sys_name,json=sysName,proto3" json:"sys_name,omitempty"`
	SysOid   string `protobuf:"bytes,8,opt,name=sys_oid,json=sysOid,proto3" json:"sys_oid,omitempty"`
	// Additional fields for device application
	Model           string       `protobuf:"bytes,9,opt,name=model,proto3" json:"model,omitempty"`
	SerialNumber    string       `protobuf:"bytes,10,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	FirmwareVersion string       `protobuf:"bytes,11,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	IpAddress       string       `protobuf:"bytes,12,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	DeviceType      DeviceType   `protobuf:"varint,13,opt,name=device_type,json=deviceType,proto3,enum=types.DeviceType" json:"device_type,omitempty"`
	Location        string       `protobuf:"bytes,14,opt,name=location,proto3" json:"location,omitempty"`
	Latitude        float64      `protobuf:"fixed64,15,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude       float64      `protobuf:"fixed64,16,opt,name=longitude,proto3" json:"longitude,omitempty"`
	DeviceStatus    DeviceStatus `protobuf:"varint,17,opt,name=device_status,json=deviceStatus,proto3,enum=types.DeviceStatus" json:"device_status,omitempty"`
	LastSeen        string       `protobuf:"bytes,18,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	Uptime          string       `protobuf:"bytes,19,opt,name=uptime,proto3" json:"uptime,omitempty"`
}

func (x *EquipmentInfo) Reset() {
	*x = EquipmentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentInfo) ProtoMessage() {}

func (x *EquipmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentInfo.ProtoReflect.Descriptor instead.
func (*EquipmentInfo) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{2}
}

func (x *EquipmentInfo) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *EquipmentInfo) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *EquipmentInfo) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *EquipmentInfo) GetSoftware() string {
	if x != nil {
		return x.Software
	}
	return ""
}

func (x *EquipmentInfo) GetHardware() string {
	if x != nil {
		return x.Hardware
	}
	return ""
}

func (x *EquipmentInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *EquipmentInfo) GetSysName() string {
	if x != nil {
		return x.SysName
	}
	return ""
}

func (x *EquipmentInfo) GetSysOid() string {
	if x != nil {
		return x.SysOid
	}
	return ""
}

func (x *EquipmentInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *EquipmentInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *EquipmentInfo) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *EquipmentInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *EquipmentInfo) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_DEVICE_TYPE_UNKNOWN
}

func (x *EquipmentInfo) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *EquipmentInfo) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *EquipmentInfo) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *EquipmentInfo) GetDeviceStatus() DeviceStatus {
	if x != nil {
		return x.DeviceStatus
	}
	return DeviceStatus_DEVICE_STATUS_UNKNOWN
}

func (x *EquipmentInfo) GetLastSeen() string {
	if x != nil {
		return x.LastSeen
	}
	return ""
}

func (x *EquipmentInfo) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

type Physical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Chassis       []*Chassis          `protobuf:"bytes,2,rep,name=chassis,proto3" json:"chassis,omitempty"`
	Ports         []*Port             `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
	PowerSupplies []*PowerSupply      `protobuf:"bytes,4,rep,name=power_supplies,json=powerSupplies,proto3" json:"power_supplies,omitempty"`
	Fans          []*Fan              `protobuf:"bytes,5,rep,name=fans,proto3" json:"fans,omitempty"`
	Performance   *PerformanceMetrics `protobuf:"bytes,6,opt,name=performance,proto3" json:"performance,omitempty"`
}

func (x *Physical) Reset() {
	*x = Physical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Physical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Physical) ProtoMessage() {}

func (x *Physical) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Physical.ProtoReflect.Descriptor instead.
func (*Physical) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{3}
}

func (x *Physical) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Physical) GetChassis() []*Chassis {
	if x != nil {
		return x.Chassis
	}
	return nil
}

func (x *Physical) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Physical) GetPowerSupplies() []*PowerSupply {
	if x != nil {
		return x.PowerSupplies
	}
	return nil
}

func (x *Physical) GetFans() []*Fan {
	if x != nil {
		return x.Fans
	}
	return nil
}

func (x *Physical) GetPerformance() *PerformanceMetrics {
	if x != nil {
		return x.Performance
	}
	return nil
}

type Logical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Intefaces []*Interface `protobuf:"bytes,2,rep,name=intefaces,proto3" json:"intefaces,omitempty"`
}

func (x *Logical) Reset() {
	*x = Logical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logical) ProtoMessage() {}

func (x *Logical) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logical.ProtoReflect.Descriptor instead.
func (*Logical) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{4}
}

func (x *Logical) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Logical) GetIntefaces() []*Interface {
	if x != nil {
		return x.Intefaces
	}
	return nil
}

type Chassis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SerialNumber  string          `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Model         string          `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	Description   string          `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Status        ComponentStatus `protobuf:"varint,5,opt,name=status,proto3,enum=types.ComponentStatus" json:"status,omitempty"`
	Slots         []*Slot         `protobuf:"bytes,6,rep,name=slots,proto3" json:"slots,omitempty"`
	Ports         []*Port         `protobuf:"bytes,7,rep,name=ports,proto3" json:"ports,omitempty"`
	Modules       []*Module       `protobuf:"bytes,8,rep,name=modules,proto3" json:"modules,omitempty"`
	PowerSupplies []*PowerSupply  `protobuf:"bytes,9,rep,name=power_supplies,json=powerSupplies,proto3" json:"power_supplies,omitempty"`
	Fans          []*Fan          `protobuf:"bytes,10,rep,name=fans,proto3" json:"fans,omitempty"`
	Temperature   float64         `protobuf:"fixed64,11,opt,name=temperature,proto3" json:"temperature,omitempty"`
}

func (x *Chassis) Reset() {
	*x = Chassis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chassis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chassis) ProtoMessage() {}

func (x *Chassis) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chassis.ProtoReflect.Descriptor instead.
func (*Chassis) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{5}
}

func (x *Chassis) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Chassis) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Chassis) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Chassis) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Chassis) GetStatus() ComponentStatus {
	if x != nil {
		return x.Status
	}
	return ComponentStatus_COMPONENT_STATUS_UNKNOWN
}

func (x *Chassis) GetSlots() []*Slot {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *Chassis) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Chassis) GetModules() []*Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *Chassis) GetPowerSupplies() []*PowerSupply {
	if x != nil {
		return x.PowerSupplies
	}
	return nil
}

func (x *Chassis) GetFans() []*Fan {
	if x != nil {
		return x.Fans
	}
	return nil
}

func (x *Chassis) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

type Slot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Module *Module `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	Ports  []*Port `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
}

func (x *Slot) Reset() {
	*x = Slot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot) ProtoMessage() {}

func (x *Slot) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot.ProtoReflect.Descriptor instead.
func (*Slot) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{6}
}

func (x *Slot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Slot) GetModule() *Module {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *Slot) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

type Module struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SerialNumber  string          `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Model         string          `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	Description   string          `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	ModuleType    ModuleType      `protobuf:"varint,6,opt,name=module_type,json=moduleType,proto3,enum=types.ModuleType" json:"module_type,omitempty"`
	Status        ComponentStatus `protobuf:"varint,7,opt,name=status,proto3,enum=types.ComponentStatus" json:"status,omitempty"`
	Ports         []*Port         `protobuf:"bytes,8,rep,name=ports,proto3" json:"ports,omitempty"`
	Cpus          []*Cpu          `protobuf:"bytes,9,rep,name=cpus,proto3" json:"cpus,omitempty"`
	MemoryModules []*Memory       `protobuf:"bytes,10,rep,name=memory_modules,json=memoryModules,proto3" json:"memory_modules,omitempty"`
	Temperature   float64         `protobuf:"fixed64,11,opt,name=temperature,proto3" json:"temperature,omitempty"`
}

func (x *Module) Reset() {
	*x = Module{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Module) ProtoMessage() {}

func (x *Module) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Module.ProtoReflect.Descriptor instead.
func (*Module) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{7}
}

func (x *Module) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Module) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Module) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Module) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Module) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Module) GetModuleType() ModuleType {
	if x != nil {
		return x.ModuleType
	}
	return ModuleType_MODULE_TYPE_UNKNOWN
}

func (x *Module) GetStatus() ComponentStatus {
	if x != nil {
		return x.Status
	}
	return ComponentStatus_COMPONENT_STATUS_UNKNOWN
}

func (x *Module) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Module) GetCpus() []*Cpu {
	if x != nil {
		return x.Cpus
	}
	return nil
}

func (x *Module) GetMemoryModules() []*Memory {
	if x != nil {
		return x.MemoryModules
	}
	return nil
}

func (x *Module) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Interfaces []*Interface `protobuf:"bytes,2,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{8}
}

func (x *Port) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Port) GetInterfaces() []*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status        string                  `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Description   string                  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	InterfaceType InterfaceType           `protobuf:"varint,5,opt,name=interface_type,json=interfaceType,proto3,enum=types.InterfaceType" json:"interface_type,omitempty"`
	Speed         uint64                  `protobuf:"varint,6,opt,name=speed,proto3" json:"speed,omitempty"`
	MacAddress    string                  `protobuf:"bytes,7,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	IpAddress     string                  `protobuf:"bytes,8,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Mtu           uint32                  `protobuf:"varint,9,opt,name=mtu,proto3" json:"mtu,omitempty"`
	AdminStatus   bool                    `protobuf:"varint,10,opt,name=admin_status,json=adminStatus,proto3" json:"admin_status,omitempty"`
	TeInfo        *TrafficEngineeringInfo `protobuf:"bytes,11,opt,name=te_info,json=teInfo,proto3" json:"te_info,omitempty"`
	QosInfo       *QosInfo                `protobuf:"bytes,12,opt,name=qos_info,json=qosInfo,proto3" json:"qos_info,omitempty"`
	BgpInfo       *BgpInfo                `protobuf:"bytes,13,opt,name=bgp_info,json=bgpInfo,proto3" json:"bgp_info,omitempty"`
	MplsInfo      *MplsInfo               `protobuf:"bytes,14,opt,name=mpls_info,json=mplsInfo,proto3" json:"mpls_info,omitempty"`
	Statistics    *InterfaceStatistics    `protobuf:"bytes,15,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{9}
}

func (x *Interface) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Interface) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Interface) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Interface) GetInterfaceType() InterfaceType {
	if x != nil {
		return x.InterfaceType
	}
	return InterfaceType_INTERFACE_TYPE_UNKNOWN
}

func (x *Interface) GetSpeed() uint64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Interface) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Interface) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Interface) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *Interface) GetAdminStatus() bool {
	if x != nil {
		return x.AdminStatus
	}
	return false
}

func (x *Interface) GetTeInfo() *TrafficEngineeringInfo {
	if x != nil {
		return x.TeInfo
	}
	return nil
}

func (x *Interface) GetQosInfo() *QosInfo {
	if x != nil {
		return x.QosInfo
	}
	return nil
}

func (x *Interface) GetBgpInfo() *BgpInfo {
	if x != nil {
		return x.BgpInfo
	}
	return nil
}

func (x *Interface) GetMplsInfo() *MplsInfo {
	if x != nil {
		return x.MplsInfo
	}
	return nil
}

func (x *Interface) GetStatistics() *InterfaceStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

// Hardware Component Messages
type Cpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Model              string          `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	Architecture       string          `protobuf:"bytes,4,opt,name=architecture,proto3" json:"architecture,omitempty"`
	Cores              uint32          `protobuf:"varint,5,opt,name=cores,proto3" json:"cores,omitempty"`
	FrequencyMhz       uint32          `protobuf:"varint,6,opt,name=frequency_mhz,json=frequencyMhz,proto3" json:"frequency_mhz,omitempty"`
	Status             ComponentStatus `protobuf:"varint,7,opt,name=status,proto3,enum=types.ComponentStatus" json:"status,omitempty"`
	Temperature        float64         `protobuf:"fixed64,8,opt,name=temperature,proto3" json:"temperature,omitempty"`
	UtilizationPercent float64         `protobuf:"fixed64,9,opt,name=utilization_percent,json=utilizationPercent,proto3" json:"utilization_percent,omitempty"`
}

func (x *Cpu) Reset() {
	*x = Cpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cpu) ProtoMessage() {}

func (x *Cpu) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cpu.ProtoReflect.Descriptor instead.
func (*Cpu) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{10}
}

func (x *Cpu) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cpu) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cpu) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Cpu) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *Cpu) GetCores() uint32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *Cpu) GetFrequencyMhz() uint32 {
	if x != nil {
		return x.FrequencyMhz
	}
	return 0
}

func (x *Cpu) GetStatus() ComponentStatus {
	if x != nil {
		return x.Status
	}
	return ComponentStatus_COMPONENT_STATUS_UNKNOWN
}

func (x *Cpu) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *Cpu) GetUtilizationPercent() float64 {
	if x != nil {
		return x.UtilizationPercent
	}
	return 0
}

type Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type               string          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	SizeBytes          uint64          `protobuf:"varint,4,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	FrequencyMhz       uint32          `protobuf:"varint,5,opt,name=frequency_mhz,json=frequencyMhz,proto3" json:"frequency_mhz,omitempty"`
	Status             ComponentStatus `protobuf:"varint,6,opt,name=status,proto3,enum=types.ComponentStatus" json:"status,omitempty"`
	UtilizationPercent float64         `protobuf:"fixed64,7,opt,name=utilization_percent,json=utilizationPercent,proto3" json:"utilization_percent,omitempty"`
}

func (x *Memory) Reset() {
	*x = Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Memory) ProtoMessage() {}

func (x *Memory) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Memory.ProtoReflect.Descriptor instead.
func (*Memory) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{11}
}

func (x *Memory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Memory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Memory) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Memory) GetSizeBytes() uint64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *Memory) GetFrequencyMhz() uint32 {
	if x != nil {
		return x.FrequencyMhz
	}
	return 0
}

func (x *Memory) GetStatus() ComponentStatus {
	if x != nil {
		return x.Status
	}
	return ComponentStatus_COMPONENT_STATUS_UNKNOWN
}

func (x *Memory) GetUtilizationPercent() float64 {
	if x != nil {
		return x.UtilizationPercent
	}
	return 0
}

type PowerSupply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Model        string          `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	SerialNumber string          `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Wattage      uint32          `protobuf:"varint,5,opt,name=wattage,proto3" json:"wattage,omitempty"`
	PowerType    PowerType       `protobuf:"varint,6,opt,name=power_type,json=powerType,proto3,enum=types.PowerType" json:"power_type,omitempty"`
	Status       ComponentStatus `protobuf:"varint,7,opt,name=status,proto3,enum=types.ComponentStatus" json:"status,omitempty"`
	Temperature  float64         `protobuf:"fixed64,8,opt,name=temperature,proto3" json:"temperature,omitempty"`
	LoadPercent  float64         `protobuf:"fixed64,9,opt,name=load_percent,json=loadPercent,proto3" json:"load_percent,omitempty"`
	Voltage      float64         `protobuf:"fixed64,10,opt,name=voltage,proto3" json:"voltage,omitempty"`
	Current      float64         `protobuf:"fixed64,11,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *PowerSupply) Reset() {
	*x = PowerSupply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerSupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerSupply) ProtoMessage() {}

func (x *PowerSupply) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerSupply.ProtoReflect.Descriptor instead.
func (*PowerSupply) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{12}
}

func (x *PowerSupply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PowerSupply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PowerSupply) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *PowerSupply) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *PowerSupply) GetWattage() uint32 {
	if x != nil {
		return x.Wattage
	}
	return 0
}

func (x *PowerSupply) GetPowerType() PowerType {
	if x != nil {
		return x.PowerType
	}
	return PowerType_POWER_TYPE_UNKNOWN
}

func (x *PowerSupply) GetStatus() ComponentStatus {
	if x != nil {
		return x.Status
	}
	return ComponentStatus_COMPONENT_STATUS_UNKNOWN
}

func (x *PowerSupply) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *PowerSupply) GetLoadPercent() float64 {
	if x != nil {
		return x.LoadPercent
	}
	return 0
}

func (x *PowerSupply) GetVoltage() float64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *PowerSupply) GetCurrent() float64 {
	if x != nil {
		return x.Current
	}
	return 0
}

type Fan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status        ComponentStatus `protobuf:"varint,4,opt,name=status,proto3,enum=types.ComponentStatus" json:"status,omitempty"`
	SpeedRpm      uint32          `protobuf:"varint,5,opt,name=speed_rpm,json=speedRpm,proto3" json:"speed_rpm,omitempty"`
	MaxSpeedRpm   uint32          `protobuf:"varint,6,opt,name=max_speed_rpm,json=maxSpeedRpm,proto3" json:"max_speed_rpm,omitempty"`
	Temperature   float64         `protobuf:"fixed64,7,opt,name=temperature,proto3" json:"temperature,omitempty"`
	VariableSpeed bool            `protobuf:"varint,8,opt,name=variable_speed,json=variableSpeed,proto3" json:"variable_speed,omitempty"`
}

func (x *Fan) Reset() {
	*x = Fan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fan) ProtoMessage() {}

func (x *Fan) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fan.ProtoReflect.Descriptor instead.
func (*Fan) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{13}
}

func (x *Fan) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Fan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Fan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Fan) GetStatus() ComponentStatus {
	if x != nil {
		return x.Status
	}
	return ComponentStatus_COMPONENT_STATUS_UNKNOWN
}

func (x *Fan) GetSpeedRpm() uint32 {
	if x != nil {
		return x.SpeedRpm
	}
	return 0
}

func (x *Fan) GetMaxSpeedRpm() uint32 {
	if x != nil {
		return x.MaxSpeedRpm
	}
	return 0
}

func (x *Fan) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *Fan) GetVariableSpeed() bool {
	if x != nil {
		return x.VariableSpeed
	}
	return false
}

// Performance and Statistics Messages
type PerformanceMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuUsagePercent    float64        `protobuf:"fixed64,1,opt,name=cpu_usage_percent,json=cpuUsagePercent,proto3" json:"cpu_usage_percent,omitempty"`
	MemoryUsagePercent float64        `protobuf:"fixed64,2,opt,name=memory_usage_percent,json=memoryUsagePercent,proto3" json:"memory_usage_percent,omitempty"`
	TemperatureCelsius float64        `protobuf:"fixed64,3,opt,name=temperature_celsius,json=temperatureCelsius,proto3" json:"temperature_celsius,omitempty"`
	Uptime             string         `protobuf:"bytes,4,opt,name=uptime,proto3" json:"uptime,omitempty"`
	LoadAverage        uint64         `protobuf:"varint,5,opt,name=load_average,json=loadAverage,proto3" json:"load_average,omitempty"`
	Processes          []*ProcessInfo `protobuf:"bytes,6,rep,name=processes,proto3" json:"processes,omitempty"`
}

func (x *PerformanceMetrics) Reset() {
	*x = PerformanceMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMetrics) ProtoMessage() {}

func (x *PerformanceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMetrics.ProtoReflect.Descriptor instead.
func (*PerformanceMetrics) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{14}
}

func (x *PerformanceMetrics) GetCpuUsagePercent() float64 {
	if x != nil {
		return x.CpuUsagePercent
	}
	return 0
}

func (x *PerformanceMetrics) GetMemoryUsagePercent() float64 {
	if x != nil {
		return x.MemoryUsagePercent
	}
	return 0
}

func (x *PerformanceMetrics) GetTemperatureCelsius() float64 {
	if x != nil {
		return x.TemperatureCelsius
	}
	return 0
}

func (x *PerformanceMetrics) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

func (x *PerformanceMetrics) GetLoadAverage() uint64 {
	if x != nil {
		return x.LoadAverage
	}
	return 0
}

func (x *PerformanceMetrics) GetProcesses() []*ProcessInfo {
	if x != nil {
		return x.Processes
	}
	return nil
}

type ProcessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pid           uint32  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	CpuPercent    float64 `protobuf:"fixed64,3,opt,name=cpu_percent,json=cpuPercent,proto3" json:"cpu_percent,omitempty"`
	MemoryPercent float64 `protobuf:"fixed64,4,opt,name=memory_percent,json=memoryPercent,proto3" json:"memory_percent,omitempty"`
	Status        string  `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ProcessInfo) Reset() {
	*x = ProcessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfo) ProtoMessage() {}

func (x *ProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfo.ProtoReflect.Descriptor instead.
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{15}
}

func (x *ProcessInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessInfo) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ProcessInfo) GetCpuPercent() float64 {
	if x != nil {
		return x.CpuPercent
	}
	return 0
}

func (x *ProcessInfo) GetMemoryPercent() float64 {
	if x != nil {
		return x.MemoryPercent
	}
	return 0
}

func (x *ProcessInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type InterfaceStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RxPackets  uint64 `protobuf:"varint,1,opt,name=rx_packets,json=rxPackets,proto3" json:"rx_packets,omitempty"`
	TxPackets  uint64 `protobuf:"varint,2,opt,name=tx_packets,json=txPackets,proto3" json:"tx_packets,omitempty"`
	RxBytes    uint64 `protobuf:"varint,3,opt,name=rx_bytes,json=rxBytes,proto3" json:"rx_bytes,omitempty"`
	TxBytes    uint64 `protobuf:"varint,4,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	RxErrors   uint64 `protobuf:"varint,5,opt,name=rx_errors,json=rxErrors,proto3" json:"rx_errors,omitempty"`
	TxErrors   uint64 `protobuf:"varint,6,opt,name=tx_errors,json=txErrors,proto3" json:"tx_errors,omitempty"`
	RxDrops    uint64 `protobuf:"varint,7,opt,name=rx_drops,json=rxDrops,proto3" json:"rx_drops,omitempty"`
	TxDrops    uint64 `protobuf:"varint,8,opt,name=tx_drops,json=txDrops,proto3" json:"tx_drops,omitempty"`
	Collisions uint64 `protobuf:"varint,9,opt,name=collisions,proto3" json:"collisions,omitempty"`
}

func (x *InterfaceStatistics) Reset() {
	*x = InterfaceStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceStatistics) ProtoMessage() {}

func (x *InterfaceStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceStatistics.ProtoReflect.Descriptor instead.
func (*InterfaceStatistics) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{16}
}

func (x *InterfaceStatistics) GetRxPackets() uint64 {
	if x != nil {
		return x.RxPackets
	}
	return 0
}

func (x *InterfaceStatistics) GetTxPackets() uint64 {
	if x != nil {
		return x.TxPackets
	}
	return 0
}

func (x *InterfaceStatistics) GetRxBytes() uint64 {
	if x != nil {
		return x.RxBytes
	}
	return 0
}

func (x *InterfaceStatistics) GetTxBytes() uint64 {
	if x != nil {
		return x.TxBytes
	}
	return 0
}

func (x *InterfaceStatistics) GetRxErrors() uint64 {
	if x != nil {
		return x.RxErrors
	}
	return 0
}

func (x *InterfaceStatistics) GetTxErrors() uint64 {
	if x != nil {
		return x.TxErrors
	}
	return 0
}

func (x *InterfaceStatistics) GetRxDrops() uint64 {
	if x != nil {
		return x.RxDrops
	}
	return 0
}

func (x *InterfaceStatistics) GetTxDrops() uint64 {
	if x != nil {
		return x.TxDrops
	}
	return 0
}

func (x *InterfaceStatistics) GetCollisions() uint64 {
	if x != nil {
		return x.Collisions
	}
	return 0
}

// Topology Application Messages
type NetworkTopology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopologyId       string              `protobuf:"bytes,1,opt,name=topology_id,json=topologyId,proto3" json:"topology_id,omitempty"`
	Name             string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TopologyType     TopologyType        `protobuf:"varint,3,opt,name=topology_type,json=topologyType,proto3,enum=types.TopologyType" json:"topology_type,omitempty"`
	Nodes            []*NetworkNode      `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Edges            []*NetworkEdge      `protobuf:"bytes,5,rep,name=edges,proto3" json:"edges,omitempty"`
	GeographicBounds *GeographicBounds   `protobuf:"bytes,6,opt,name=geographic_bounds,json=geographicBounds,proto3" json:"geographic_bounds,omitempty"`
	Statistics       *TopologyStatistics `protobuf:"bytes,7,opt,name=statistics,proto3" json:"statistics,omitempty"`
	HealthStatus     *TopologyHealth     `protobuf:"bytes,8,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`
	Regions          []*NetworkRegion    `protobuf:"bytes,9,rep,name=regions,proto3" json:"regions,omitempty"`
	LastUpdated      string              `protobuf:"bytes,10,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *NetworkTopology) Reset() {
	*x = NetworkTopology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkTopology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkTopology) ProtoMessage() {}

func (x *NetworkTopology) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkTopology.ProtoReflect.Descriptor instead.
func (*NetworkTopology) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{17}
}

func (x *NetworkTopology) GetTopologyId() string {
	if x != nil {
		return x.TopologyId
	}
	return ""
}

func (x *NetworkTopology) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkTopology) GetTopologyType() TopologyType {
	if x != nil {
		return x.TopologyType
	}
	return TopologyType_TOPOLOGY_TYPE_UNKNOWN
}

func (x *NetworkTopology) GetNodes() []*NetworkNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *NetworkTopology) GetEdges() []*NetworkEdge {
	if x != nil {
		return x.Edges
	}
	return nil
}

func (x *NetworkTopology) GetGeographicBounds() *GeographicBounds {
	if x != nil {
		return x.GeographicBounds
	}
	return nil
}

func (x *NetworkTopology) GetStatistics() *TopologyStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *NetworkTopology) GetHealthStatus() *TopologyHealth {
	if x != nil {
		return x.HealthStatus
	}
	return nil
}

func (x *NetworkTopology) GetRegions() []*NetworkRegion {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *NetworkTopology) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

type NetworkNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId       string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Name         string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NodeType     NetworkNodeType        `protobuf:"varint,3,opt,name=node_type,json=nodeType,proto3,enum=types.NetworkNodeType" json:"node_type,omitempty"`
	Status       NetworkNodeStatus      `protobuf:"varint,4,opt,name=status,proto3,enum=types.NetworkNodeStatus" json:"status,omitempty"`
	Location     string                 `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Latitude     float64                `protobuf:"fixed64,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude    float64                `protobuf:"fixed64,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Coordinates  *GeographicCoordinates `protobuf:"bytes,8,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	Interfaces   []string               `protobuf:"bytes,9,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	Capabilities *NodeCapabilities      `protobuf:"bytes,10,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	Metrics      *NodeMetrics           `protobuf:"bytes,11,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Region       string                 `protobuf:"bytes,12,opt,name=region,proto3" json:"region,omitempty"`
	Tier         uint32                 `protobuf:"varint,13,opt,name=tier,proto3" json:"tier,omitempty"`
}

func (x *NetworkNode) Reset() {
	*x = NetworkNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkNode) ProtoMessage() {}

func (x *NetworkNode) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkNode.ProtoReflect.Descriptor instead.
func (*NetworkNode) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{18}
}

func (x *NetworkNode) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NetworkNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkNode) GetNodeType() NetworkNodeType {
	if x != nil {
		return x.NodeType
	}
	return NetworkNodeType_NETWORK_NODE_TYPE_UNKNOWN
}

func (x *NetworkNode) GetStatus() NetworkNodeStatus {
	if x != nil {
		return x.Status
	}
	return NetworkNodeStatus_NODE_STATUS_UNKNOWN
}

func (x *NetworkNode) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *NetworkNode) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *NetworkNode) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *NetworkNode) GetCoordinates() *GeographicCoordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *NetworkNode) GetInterfaces() []string {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *NetworkNode) GetCapabilities() *NodeCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *NetworkNode) GetMetrics() *NodeMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *NetworkNode) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *NetworkNode) GetTier() uint32 {
	if x != nil {
		return x.Tier
	}
	return 0
}

type NetworkLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkId              string          `protobuf:"bytes,1,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	Name                string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FromNode            string          `protobuf:"bytes,3,opt,name=from_node,json=fromNode,proto3" json:"from_node,omitempty"`
	ToNode              string          `protobuf:"bytes,4,opt,name=to_node,json=toNode,proto3" json:"to_node,omitempty"`
	LinkStatus          LinkStatus      `protobuf:"varint,5,opt,name=link_status,json=linkStatus,proto3,enum=types.LinkStatus" json:"link_status,omitempty"`
	Bandwidth           string          `protobuf:"bytes,6,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	LinkType            LinkType        `protobuf:"varint,7,opt,name=link_type,json=linkType,proto3,enum=types.LinkType" json:"link_type,omitempty"`
	Metrics             *LinkMetrics    `protobuf:"bytes,8,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Path                *GeographicPath `protobuf:"bytes,9,opt,name=path,proto3" json:"path,omitempty"`
	UtilizationPercent  float64         `protobuf:"fixed64,10,opt,name=utilization_percent,json=utilizationPercent,proto3" json:"utilization_percent,omitempty"`
	LatencyMs           float64         `protobuf:"fixed64,11,opt,name=latency_ms,json=latencyMs,proto3" json:"latency_ms,omitempty"`
	DistanceKm          float64         `protobuf:"fixed64,12,opt,name=distance_km,json=distanceKm,proto3" json:"distance_km,omitempty"`
	Uptime              string          `protobuf:"bytes,13,opt,name=uptime,proto3" json:"uptime,omitempty"`
	ErrorRate           float64         `protobuf:"fixed64,14,opt,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty"`
	AvailabilityPercent float64         `protobuf:"fixed64,15,opt,name=availability_percent,json=availabilityPercent,proto3" json:"availability_percent,omitempty"`
}

func (x *NetworkLink) Reset() {
	*x = NetworkLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkLink) ProtoMessage() {}

func (x *NetworkLink) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkLink.ProtoReflect.Descriptor instead.
func (*NetworkLink) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{19}
}

func (x *NetworkLink) GetLinkId() string {
	if x != nil {
		return x.LinkId
	}
	return ""
}

func (x *NetworkLink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkLink) GetFromNode() string {
	if x != nil {
		return x.FromNode
	}
	return ""
}

func (x *NetworkLink) GetToNode() string {
	if x != nil {
		return x.ToNode
	}
	return ""
}

func (x *NetworkLink) GetLinkStatus() LinkStatus {
	if x != nil {
		return x.LinkStatus
	}
	return LinkStatus_LINK_STATUS_UNKNOWN
}

func (x *NetworkLink) GetBandwidth() string {
	if x != nil {
		return x.Bandwidth
	}
	return ""
}

func (x *NetworkLink) GetLinkType() LinkType {
	if x != nil {
		return x.LinkType
	}
	return LinkType_LINK_TYPE_UNKNOWN
}

func (x *NetworkLink) GetMetrics() *LinkMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *NetworkLink) GetPath() *GeographicPath {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *NetworkLink) GetUtilizationPercent() float64 {
	if x != nil {
		return x.UtilizationPercent
	}
	return 0
}

func (x *NetworkLink) GetLatencyMs() float64 {
	if x != nil {
		return x.LatencyMs
	}
	return 0
}

func (x *NetworkLink) GetDistanceKm() float64 {
	if x != nil {
		return x.DistanceKm
	}
	return 0
}

func (x *NetworkLink) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

func (x *NetworkLink) GetErrorRate() float64 {
	if x != nil {
		return x.ErrorRate
	}
	return 0
}

func (x *NetworkLink) GetAvailabilityPercent() float64 {
	if x != nil {
		return x.AvailabilityPercent
	}
	return 0
}

type NetworkEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EdgeId     string          `protobuf:"bytes,1,opt,name=edge_id,json=edgeId,proto3" json:"edge_id,omitempty"`
	SourceNode string          `protobuf:"bytes,2,opt,name=source_node,json=sourceNode,proto3" json:"source_node,omitempty"`
	TargetNode string          `protobuf:"bytes,3,opt,name=target_node,json=targetNode,proto3" json:"target_node,omitempty"`
	EdgeType   EdgeType        `protobuf:"varint,4,opt,name=edge_type,json=edgeType,proto3,enum=types.EdgeType" json:"edge_type,omitempty"`
	Status     EdgeStatus      `protobuf:"varint,5,opt,name=status,proto3,enum=types.EdgeStatus" json:"status,omitempty"`
	Properties *EdgeProperties `protobuf:"bytes,6,opt,name=properties,proto3" json:"properties,omitempty"`
	Metrics    []*EdgeMetric   `protobuf:"bytes,7,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *NetworkEdge) Reset() {
	*x = NetworkEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkEdge) ProtoMessage() {}

func (x *NetworkEdge) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkEdge.ProtoReflect.Descriptor instead.
func (*NetworkEdge) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{20}
}

func (x *NetworkEdge) GetEdgeId() string {
	if x != nil {
		return x.EdgeId
	}
	return ""
}

func (x *NetworkEdge) GetSourceNode() string {
	if x != nil {
		return x.SourceNode
	}
	return ""
}

func (x *NetworkEdge) GetTargetNode() string {
	if x != nil {
		return x.TargetNode
	}
	return ""
}

func (x *NetworkEdge) GetEdgeType() EdgeType {
	if x != nil {
		return x.EdgeType
	}
	return EdgeType_EDGE_TYPE_UNKNOWN
}

func (x *NetworkEdge) GetStatus() EdgeStatus {
	if x != nil {
		return x.Status
	}
	return EdgeStatus_EDGE_STATUS_UNKNOWN
}

func (x *NetworkEdge) GetProperties() *EdgeProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *NetworkEdge) GetMetrics() []*EdgeMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type GeographicCoordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude         float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude        float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude         float64 `protobuf:"fixed64,3,opt,name=altitude,proto3" json:"altitude,omitempty"`
	CoordinateSystem string  `protobuf:"bytes,4,opt,name=coordinate_system,json=coordinateSystem,proto3" json:"coordinate_system,omitempty"`
}

func (x *GeographicCoordinates) Reset() {
	*x = GeographicCoordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeographicCoordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeographicCoordinates) ProtoMessage() {}

func (x *GeographicCoordinates) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeographicCoordinates.ProtoReflect.Descriptor instead.
func (*GeographicCoordinates) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{21}
}

func (x *GeographicCoordinates) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GeographicCoordinates) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GeographicCoordinates) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *GeographicCoordinates) GetCoordinateSystem() string {
	if x != nil {
		return x.CoordinateSystem
	}
	return ""
}

type GeographicBounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NorthEast *GeographicCoordinates `protobuf:"bytes,1,opt,name=north_east,json=northEast,proto3" json:"north_east,omitempty"`
	SouthWest *GeographicCoordinates `protobuf:"bytes,2,opt,name=south_west,json=southWest,proto3" json:"south_west,omitempty"`
	Center    *GeographicCoordinates `protobuf:"bytes,3,opt,name=center,proto3" json:"center,omitempty"`
	ZoomLevel float64                `protobuf:"fixed64,4,opt,name=zoom_level,json=zoomLevel,proto3" json:"zoom_level,omitempty"`
}

func (x *GeographicBounds) Reset() {
	*x = GeographicBounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeographicBounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeographicBounds) ProtoMessage() {}

func (x *GeographicBounds) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeographicBounds.ProtoReflect.Descriptor instead.
func (*GeographicBounds) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{22}
}

func (x *GeographicBounds) GetNorthEast() *GeographicCoordinates {
	if x != nil {
		return x.NorthEast
	}
	return nil
}

func (x *GeographicBounds) GetSouthWest() *GeographicCoordinates {
	if x != nil {
		return x.SouthWest
	}
	return nil
}

func (x *GeographicBounds) GetCenter() *GeographicCoordinates {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *GeographicBounds) GetZoomLevel() float64 {
	if x != nil {
		return x.ZoomLevel
	}
	return 0
}

type GeographicPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Waypoints       []*GeographicCoordinates `protobuf:"bytes,1,rep,name=waypoints,proto3" json:"waypoints,omitempty"`
	TotalDistanceKm float64                  `protobuf:"fixed64,2,opt,name=total_distance_km,json=totalDistanceKm,proto3" json:"total_distance_km,omitempty"`
	PathType        PathType                 `protobuf:"varint,3,opt,name=path_type,json=pathType,proto3,enum=types.PathType" json:"path_type,omitempty"`
	TransitRegions  []string                 `protobuf:"bytes,4,rep,name=transit_regions,json=transitRegions,proto3" json:"transit_regions,omitempty"`
}

func (x *GeographicPath) Reset() {
	*x = GeographicPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeographicPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeographicPath) ProtoMessage() {}

func (x *GeographicPath) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeographicPath.ProtoReflect.Descriptor instead.
func (*GeographicPath) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{23}
}

func (x *GeographicPath) GetWaypoints() []*GeographicCoordinates {
	if x != nil {
		return x.Waypoints
	}
	return nil
}

func (x *GeographicPath) GetTotalDistanceKm() float64 {
	if x != nil {
		return x.TotalDistanceKm
	}
	return 0
}

func (x *GeographicPath) GetPathType() PathType {
	if x != nil {
		return x.PathType
	}
	return PathType_PATH_TYPE_UNKNOWN
}

func (x *GeographicPath) GetTransitRegions() []string {
	if x != nil {
		return x.TransitRegions
	}
	return nil
}

type NetworkRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId   string            `protobuf:"bytes,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Name       string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RegionType RegionType        `protobuf:"varint,3,opt,name=region_type,json=regionType,proto3,enum=types.RegionType" json:"region_type,omitempty"`
	Bounds     *GeographicBounds `protobuf:"bytes,4,opt,name=bounds,proto3" json:"bounds,omitempty"`
	Nodes      []string          `protobuf:"bytes,5,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Links      []string          `protobuf:"bytes,6,rep,name=links,proto3" json:"links,omitempty"`
	Statistics *RegionStatistics `protobuf:"bytes,7,opt,name=statistics,proto3" json:"statistics,omitempty"`
	Health     *RegionHealth     `protobuf:"bytes,8,opt,name=health,proto3" json:"health,omitempty"`
}

func (x *NetworkRegion) Reset() {
	*x = NetworkRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkRegion) ProtoMessage() {}

func (x *NetworkRegion) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkRegion.ProtoReflect.Descriptor instead.
func (*NetworkRegion) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{24}
}

func (x *NetworkRegion) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *NetworkRegion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkRegion) GetRegionType() RegionType {
	if x != nil {
		return x.RegionType
	}
	return RegionType_REGION_TYPE_UNKNOWN
}

func (x *NetworkRegion) GetBounds() *GeographicBounds {
	if x != nil {
		return x.Bounds
	}
	return nil
}

func (x *NetworkRegion) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *NetworkRegion) GetLinks() []string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *NetworkRegion) GetStatistics() *RegionStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *NetworkRegion) GetHealth() *RegionHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

type NetworkHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverallStatus              HealthStatus   `protobuf:"varint,1,opt,name=overall_status,json=overallStatus,proto3,enum=types.HealthStatus" json:"overall_status,omitempty"`
	TotalDevices               uint32         `protobuf:"varint,2,opt,name=total_devices,json=totalDevices,proto3" json:"total_devices,omitempty"`
	OnlineDevices              uint32         `protobuf:"varint,3,opt,name=online_devices,json=onlineDevices,proto3" json:"online_devices,omitempty"`
	OfflineDevices             uint32         `protobuf:"varint,4,opt,name=offline_devices,json=offlineDevices,proto3" json:"offline_devices,omitempty"`
	WarningDevices             uint32         `protobuf:"varint,5,opt,name=warning_devices,json=warningDevices,proto3" json:"warning_devices,omitempty"`
	CriticalDevices            uint32         `protobuf:"varint,6,opt,name=critical_devices,json=criticalDevices,proto3" json:"critical_devices,omitempty"`
	TotalLinks                 uint32         `protobuf:"varint,7,opt,name=total_links,json=totalLinks,proto3" json:"total_links,omitempty"`
	ActiveLinks                uint32         `protobuf:"varint,8,opt,name=active_links,json=activeLinks,proto3" json:"active_links,omitempty"`
	InactiveLinks              uint32         `protobuf:"varint,9,opt,name=inactive_links,json=inactiveLinks,proto3" json:"inactive_links,omitempty"`
	WarningLinks               uint32         `protobuf:"varint,10,opt,name=warning_links,json=warningLinks,proto3" json:"warning_links,omitempty"`
	NetworkAvailabilityPercent float64        `protobuf:"fixed64,11,opt,name=network_availability_percent,json=networkAvailabilityPercent,proto3" json:"network_availability_percent,omitempty"`
	Alerts                     []*HealthAlert `protobuf:"bytes,12,rep,name=alerts,proto3" json:"alerts,omitempty"`
	LastHealthCheck            string         `protobuf:"bytes,13,opt,name=last_health_check,json=lastHealthCheck,proto3" json:"last_health_check,omitempty"`
}

func (x *NetworkHealth) Reset() {
	*x = NetworkHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkHealth) ProtoMessage() {}

func (x *NetworkHealth) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkHealth.ProtoReflect.Descriptor instead.
func (*NetworkHealth) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{25}
}

func (x *NetworkHealth) GetOverallStatus() HealthStatus {
	if x != nil {
		return x.OverallStatus
	}
	return HealthStatus_HEALTH_STATUS_UNKNOWN
}

func (x *NetworkHealth) GetTotalDevices() uint32 {
	if x != nil {
		return x.TotalDevices
	}
	return 0
}

func (x *NetworkHealth) GetOnlineDevices() uint32 {
	if x != nil {
		return x.OnlineDevices
	}
	return 0
}

func (x *NetworkHealth) GetOfflineDevices() uint32 {
	if x != nil {
		return x.OfflineDevices
	}
	return 0
}

func (x *NetworkHealth) GetWarningDevices() uint32 {
	if x != nil {
		return x.WarningDevices
	}
	return 0
}

func (x *NetworkHealth) GetCriticalDevices() uint32 {
	if x != nil {
		return x.CriticalDevices
	}
	return 0
}

func (x *NetworkHealth) GetTotalLinks() uint32 {
	if x != nil {
		return x.TotalLinks
	}
	return 0
}

func (x *NetworkHealth) GetActiveLinks() uint32 {
	if x != nil {
		return x.ActiveLinks
	}
	return 0
}

func (x *NetworkHealth) GetInactiveLinks() uint32 {
	if x != nil {
		return x.InactiveLinks
	}
	return 0
}

func (x *NetworkHealth) GetWarningLinks() uint32 {
	if x != nil {
		return x.WarningLinks
	}
	return 0
}

func (x *NetworkHealth) GetNetworkAvailabilityPercent() float64 {
	if x != nil {
		return x.NetworkAvailabilityPercent
	}
	return 0
}

func (x *NetworkHealth) GetAlerts() []*HealthAlert {
	if x != nil {
		return x.Alerts
	}
	return nil
}

func (x *NetworkHealth) GetLastHealthCheck() string {
	if x != nil {
		return x.LastHealthCheck
	}
	return ""
}

type TopologyStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalNodes            uint32              `protobuf:"varint,1,opt,name=total_nodes,json=totalNodes,proto3" json:"total_nodes,omitempty"`
	TotalEdges            uint32              `protobuf:"varint,2,opt,name=total_edges,json=totalEdges,proto3" json:"total_edges,omitempty"`
	ActiveNodes           uint32              `protobuf:"varint,3,opt,name=active_nodes,json=activeNodes,proto3" json:"active_nodes,omitempty"`
	ActiveEdges           uint32              `protobuf:"varint,4,opt,name=active_edges,json=activeEdges,proto3" json:"active_edges,omitempty"`
	NetworkDensity        float64             `protobuf:"fixed64,5,opt,name=network_density,json=networkDensity,proto3" json:"network_density,omitempty"`
	ConnectedComponents   uint32              `protobuf:"varint,6,opt,name=connected_components,json=connectedComponents,proto3" json:"connected_components,omitempty"`
	AverageDegree         float64             `protobuf:"fixed64,7,opt,name=average_degree,json=averageDegree,proto3" json:"average_degree,omitempty"`
	MaxDegree             uint32              `protobuf:"varint,8,opt,name=max_degree,json=maxDegree,proto3" json:"max_degree,omitempty"`
	ClusteringCoefficient float64             `protobuf:"fixed64,9,opt,name=clustering_coefficient,json=clusteringCoefficient,proto3" json:"clustering_coefficient,omitempty"`
	RegionStats           []*RegionStatistics `protobuf:"bytes,10,rep,name=region_stats,json=regionStats,proto3" json:"region_stats,omitempty"`
}

func (x *TopologyStatistics) Reset() {
	*x = TopologyStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyStatistics) ProtoMessage() {}

func (x *TopologyStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyStatistics.ProtoReflect.Descriptor instead.
func (*TopologyStatistics) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{26}
}

func (x *TopologyStatistics) GetTotalNodes() uint32 {
	if x != nil {
		return x.TotalNodes
	}
	return 0
}

func (x *TopologyStatistics) GetTotalEdges() uint32 {
	if x != nil {
		return x.TotalEdges
	}
	return 0
}

func (x *TopologyStatistics) GetActiveNodes() uint32 {
	if x != nil {
		return x.ActiveNodes
	}
	return 0
}

func (x *TopologyStatistics) GetActiveEdges() uint32 {
	if x != nil {
		return x.ActiveEdges
	}
	return 0
}

func (x *TopologyStatistics) GetNetworkDensity() float64 {
	if x != nil {
		return x.NetworkDensity
	}
	return 0
}

func (x *TopologyStatistics) GetConnectedComponents() uint32 {
	if x != nil {
		return x.ConnectedComponents
	}
	return 0
}

func (x *TopologyStatistics) GetAverageDegree() float64 {
	if x != nil {
		return x.AverageDegree
	}
	return 0
}

func (x *TopologyStatistics) GetMaxDegree() uint32 {
	if x != nil {
		return x.MaxDegree
	}
	return 0
}

func (x *TopologyStatistics) GetClusteringCoefficient() float64 {
	if x != nil {
		return x.ClusteringCoefficient
	}
	return 0
}

func (x *TopologyStatistics) GetRegionStats() []*RegionStatistics {
	if x != nil {
		return x.RegionStats
	}
	return nil
}

type RegionStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionName        string  `protobuf:"bytes,1,opt,name=region_name,json=regionName,proto3" json:"region_name,omitempty"`
	NodeCount         uint32  `protobuf:"varint,2,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	LinkCount         uint32  `protobuf:"varint,3,opt,name=link_count,json=linkCount,proto3" json:"link_count,omitempty"`
	ActiveNodes       uint32  `protobuf:"varint,4,opt,name=active_nodes,json=activeNodes,proto3" json:"active_nodes,omitempty"`
	ActiveLinks       uint32  `protobuf:"varint,5,opt,name=active_links,json=activeLinks,proto3" json:"active_links,omitempty"`
	RegionUtilization float64 `protobuf:"fixed64,6,opt,name=region_utilization,json=regionUtilization,proto3" json:"region_utilization,omitempty"`
	AverageLatencyMs  float64 `protobuf:"fixed64,7,opt,name=average_latency_ms,json=averageLatencyMs,proto3" json:"average_latency_ms,omitempty"`
}

func (x *RegionStatistics) Reset() {
	*x = RegionStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionStatistics) ProtoMessage() {}

func (x *RegionStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionStatistics.ProtoReflect.Descriptor instead.
func (*RegionStatistics) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{27}
}

func (x *RegionStatistics) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *RegionStatistics) GetNodeCount() uint32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *RegionStatistics) GetLinkCount() uint32 {
	if x != nil {
		return x.LinkCount
	}
	return 0
}

func (x *RegionStatistics) GetActiveNodes() uint32 {
	if x != nil {
		return x.ActiveNodes
	}
	return 0
}

func (x *RegionStatistics) GetActiveLinks() uint32 {
	if x != nil {
		return x.ActiveLinks
	}
	return 0
}

func (x *RegionStatistics) GetRegionUtilization() float64 {
	if x != nil {
		return x.RegionUtilization
	}
	return 0
}

func (x *RegionStatistics) GetAverageLatencyMs() float64 {
	if x != nil {
		return x.AverageLatencyMs
	}
	return 0
}

type NodeCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocols            []string `protobuf:"bytes,1,rep,name=protocols,proto3" json:"protocols,omitempty"`
	Services             []string `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
	MaxThroughputBps     uint64   `protobuf:"varint,3,opt,name=max_throughput_bps,json=maxThroughputBps,proto3" json:"max_throughput_bps,omitempty"`
	MaxConnections       uint32   `protobuf:"varint,4,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	RoutingCapable       bool     `protobuf:"varint,5,opt,name=routing_capable,json=routingCapable,proto3" json:"routing_capable,omitempty"`
	SwitchingCapable     bool     `protobuf:"varint,6,opt,name=switching_capable,json=switchingCapable,proto3" json:"switching_capable,omitempty"`
	FirewallCapable      bool     `protobuf:"varint,7,opt,name=firewall_capable,json=firewallCapable,proto3" json:"firewall_capable,omitempty"`
	LoadBalancingCapable bool     `protobuf:"varint,8,opt,name=load_balancing_capable,json=loadBalancingCapable,proto3" json:"load_balancing_capable,omitempty"`
}

func (x *NodeCapabilities) Reset() {
	*x = NodeCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeCapabilities) ProtoMessage() {}

func (x *NodeCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeCapabilities.ProtoReflect.Descriptor instead.
func (*NodeCapabilities) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{28}
}

func (x *NodeCapabilities) GetProtocols() []string {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *NodeCapabilities) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *NodeCapabilities) GetMaxThroughputBps() uint64 {
	if x != nil {
		return x.MaxThroughputBps
	}
	return 0
}

func (x *NodeCapabilities) GetMaxConnections() uint32 {
	if x != nil {
		return x.MaxConnections
	}
	return 0
}

func (x *NodeCapabilities) GetRoutingCapable() bool {
	if x != nil {
		return x.RoutingCapable
	}
	return false
}

func (x *NodeCapabilities) GetSwitchingCapable() bool {
	if x != nil {
		return x.SwitchingCapable
	}
	return false
}

func (x *NodeCapabilities) GetFirewallCapable() bool {
	if x != nil {
		return x.FirewallCapable
	}
	return false
}

func (x *NodeCapabilities) GetLoadBalancingCapable() bool {
	if x != nil {
		return x.LoadBalancingCapable
	}
	return false
}

type NodeMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuUtilization    float64            `protobuf:"fixed64,1,opt,name=cpu_utilization,json=cpuUtilization,proto3" json:"cpu_utilization,omitempty"`
	MemoryUtilization float64            `protobuf:"fixed64,2,opt,name=memory_utilization,json=memoryUtilization,proto3" json:"memory_utilization,omitempty"`
	PacketsForwarded  uint64             `protobuf:"varint,3,opt,name=packets_forwarded,json=packetsForwarded,proto3" json:"packets_forwarded,omitempty"`
	PacketsDropped    uint64             `protobuf:"varint,4,opt,name=packets_dropped,json=packetsDropped,proto3" json:"packets_dropped,omitempty"`
	BytesProcessed    uint64             `protobuf:"varint,5,opt,name=bytes_processed,json=bytesProcessed,proto3" json:"bytes_processed,omitempty"`
	ActiveConnections uint32             `protobuf:"varint,6,opt,name=active_connections,json=activeConnections,proto3" json:"active_connections,omitempty"`
	Temperature       float64            `protobuf:"fixed64,7,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Uptime            string             `protobuf:"bytes,8,opt,name=uptime,proto3" json:"uptime,omitempty"`
	InterfaceMetrics  []*InterfaceMetric `protobuf:"bytes,9,rep,name=interface_metrics,json=interfaceMetrics,proto3" json:"interface_metrics,omitempty"`
}

func (x *NodeMetrics) Reset() {
	*x = NodeMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMetrics) ProtoMessage() {}

func (x *NodeMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMetrics.ProtoReflect.Descriptor instead.
func (*NodeMetrics) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{29}
}

func (x *NodeMetrics) GetCpuUtilization() float64 {
	if x != nil {
		return x.CpuUtilization
	}
	return 0
}

func (x *NodeMetrics) GetMemoryUtilization() float64 {
	if x != nil {
		return x.MemoryUtilization
	}
	return 0
}

func (x *NodeMetrics) GetPacketsForwarded() uint64 {
	if x != nil {
		return x.PacketsForwarded
	}
	return 0
}

func (x *NodeMetrics) GetPacketsDropped() uint64 {
	if x != nil {
		return x.PacketsDropped
	}
	return 0
}

func (x *NodeMetrics) GetBytesProcessed() uint64 {
	if x != nil {
		return x.BytesProcessed
	}
	return 0
}

func (x *NodeMetrics) GetActiveConnections() uint32 {
	if x != nil {
		return x.ActiveConnections
	}
	return 0
}

func (x *NodeMetrics) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *NodeMetrics) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

func (x *NodeMetrics) GetInterfaceMetrics() []*InterfaceMetric {
	if x != nil {
		return x.InterfaceMetrics
	}
	return nil
}

type InterfaceMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName      string          `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Status             InterfaceStatus `protobuf:"varint,2,opt,name=status,proto3,enum=types.InterfaceStatus" json:"status,omitempty"`
	RxBytes            uint64          `protobuf:"varint,3,opt,name=rx_bytes,json=rxBytes,proto3" json:"rx_bytes,omitempty"`
	TxBytes            uint64          `protobuf:"varint,4,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	RxPackets          uint64          `protobuf:"varint,5,opt,name=rx_packets,json=rxPackets,proto3" json:"rx_packets,omitempty"`
	TxPackets          uint64          `protobuf:"varint,6,opt,name=tx_packets,json=txPackets,proto3" json:"tx_packets,omitempty"`
	UtilizationPercent float64         `protobuf:"fixed64,7,opt,name=utilization_percent,json=utilizationPercent,proto3" json:"utilization_percent,omitempty"`
	Errors             uint32          `protobuf:"varint,8,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *InterfaceMetric) Reset() {
	*x = InterfaceMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceMetric) ProtoMessage() {}

func (x *InterfaceMetric) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceMetric.ProtoReflect.Descriptor instead.
func (*InterfaceMetric) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{30}
}

func (x *InterfaceMetric) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *InterfaceMetric) GetStatus() InterfaceStatus {
	if x != nil {
		return x.Status
	}
	return InterfaceStatus_INTERFACE_STATUS_UNKNOWN
}

func (x *InterfaceMetric) GetRxBytes() uint64 {
	if x != nil {
		return x.RxBytes
	}
	return 0
}

func (x *InterfaceMetric) GetTxBytes() uint64 {
	if x != nil {
		return x.TxBytes
	}
	return 0
}

func (x *InterfaceMetric) GetRxPackets() uint64 {
	if x != nil {
		return x.RxPackets
	}
	return 0
}

func (x *InterfaceMetric) GetTxPackets() uint64 {
	if x != nil {
		return x.TxPackets
	}
	return 0
}

func (x *InterfaceMetric) GetUtilizationPercent() float64 {
	if x != nil {
		return x.UtilizationPercent
	}
	return 0
}

func (x *InterfaceMetric) GetErrors() uint32 {
	if x != nil {
		return x.Errors
	}
	return 0
}

type LinkMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesTransmitted   uint64  `protobuf:"varint,1,opt,name=bytes_transmitted,json=bytesTransmitted,proto3" json:"bytes_transmitted,omitempty"`
	BytesReceived      uint64  `protobuf:"varint,2,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	PacketsTransmitted uint64  `protobuf:"varint,3,opt,name=packets_transmitted,json=packetsTransmitted,proto3" json:"packets_transmitted,omitempty"`
	PacketsReceived    uint64  `protobuf:"varint,4,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received,omitempty"`
	ErrorCount         uint32  `protobuf:"varint,5,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	DropCount          uint32  `protobuf:"varint,6,opt,name=drop_count,json=dropCount,proto3" json:"drop_count,omitempty"`
	JitterMs           float64 `protobuf:"fixed64,7,opt,name=jitter_ms,json=jitterMs,proto3" json:"jitter_ms,omitempty"`
	PacketLossPercent  float64 `protobuf:"fixed64,8,opt,name=packet_loss_percent,json=packetLossPercent,proto3" json:"packet_loss_percent,omitempty"`
	ThroughputBps      float64 `protobuf:"fixed64,9,opt,name=throughput_bps,json=throughputBps,proto3" json:"throughput_bps,omitempty"`
	LastMeasurement    string  `protobuf:"bytes,10,opt,name=last_measurement,json=lastMeasurement,proto3" json:"last_measurement,omitempty"`
}

func (x *LinkMetrics) Reset() {
	*x = LinkMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkMetrics) ProtoMessage() {}

func (x *LinkMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkMetrics.ProtoReflect.Descriptor instead.
func (*LinkMetrics) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{31}
}

func (x *LinkMetrics) GetBytesTransmitted() uint64 {
	if x != nil {
		return x.BytesTransmitted
	}
	return 0
}

func (x *LinkMetrics) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *LinkMetrics) GetPacketsTransmitted() uint64 {
	if x != nil {
		return x.PacketsTransmitted
	}
	return 0
}

func (x *LinkMetrics) GetPacketsReceived() uint64 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *LinkMetrics) GetErrorCount() uint32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *LinkMetrics) GetDropCount() uint32 {
	if x != nil {
		return x.DropCount
	}
	return 0
}

func (x *LinkMetrics) GetJitterMs() float64 {
	if x != nil {
		return x.JitterMs
	}
	return 0
}

func (x *LinkMetrics) GetPacketLossPercent() float64 {
	if x != nil {
		return x.PacketLossPercent
	}
	return 0
}

func (x *LinkMetrics) GetThroughputBps() float64 {
	if x != nil {
		return x.ThroughputBps
	}
	return 0
}

func (x *LinkMetrics) GetLastMeasurement() string {
	if x != nil {
		return x.LastMeasurement
	}
	return ""
}

type EdgeProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight     float64           `protobuf:"fixed64,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Cost       uint32            `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
	Label      string            `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Attributes map[string]string `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EdgeProperties) Reset() {
	*x = EdgeProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeProperties) ProtoMessage() {}

func (x *EdgeProperties) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeProperties.ProtoReflect.Descriptor instead.
func (*EdgeProperties) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{32}
}

func (x *EdgeProperties) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *EdgeProperties) GetCost() uint32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *EdgeProperties) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *EdgeProperties) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type EdgeMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricName string  `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	Value      float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Unit       string  `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	Timestamp  string  `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *EdgeMetric) Reset() {
	*x = EdgeMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeMetric) ProtoMessage() {}

func (x *EdgeMetric) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeMetric.ProtoReflect.Descriptor instead.
func (*EdgeMetric) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{33}
}

func (x *EdgeMetric) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *EdgeMetric) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *EdgeMetric) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *EdgeMetric) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type TopologyHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          HealthStatus            `protobuf:"varint,1,opt,name=status,proto3,enum=types.HealthStatus" json:"status,omitempty"`
	HealthScore     float64                 `protobuf:"fixed64,2,opt,name=health_score,json=healthScore,proto3" json:"health_score,omitempty"`
	Issues          []*HealthIssue          `protobuf:"bytes,3,rep,name=issues,proto3" json:"issues,omitempty"`
	Recommendations []*HealthRecommendation `protobuf:"bytes,4,rep,name=recommendations,proto3" json:"recommendations,omitempty"`
	AssessmentTime  string                  `protobuf:"bytes,5,opt,name=assessment_time,json=assessmentTime,proto3" json:"assessment_time,omitempty"`
}

func (x *TopologyHealth) Reset() {
	*x = TopologyHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyHealth) ProtoMessage() {}

func (x *TopologyHealth) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyHealth.ProtoReflect.Descriptor instead.
func (*TopologyHealth) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{34}
}

func (x *TopologyHealth) GetStatus() HealthStatus {
	if x != nil {
		return x.Status
	}
	return HealthStatus_HEALTH_STATUS_UNKNOWN
}

func (x *TopologyHealth) GetHealthScore() float64 {
	if x != nil {
		return x.HealthScore
	}
	return 0
}

func (x *TopologyHealth) GetIssues() []*HealthIssue {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *TopologyHealth) GetRecommendations() []*HealthRecommendation {
	if x != nil {
		return x.Recommendations
	}
	return nil
}

func (x *TopologyHealth) GetAssessmentTime() string {
	if x != nil {
		return x.AssessmentTime
	}
	return ""
}

type HealthAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertId           string        `protobuf:"bytes,1,opt,name=alert_id,json=alertId,proto3" json:"alert_id,omitempty"`
	Severity          AlertSeverity `protobuf:"varint,2,opt,name=severity,proto3,enum=types.AlertSeverity" json:"severity,omitempty"`
	Title             string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description       string        `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	AffectedComponent string        `protobuf:"bytes,5,opt,name=affected_component,json=affectedComponent,proto3" json:"affected_component,omitempty"`
	ComponentType     ComponentType `protobuf:"varint,6,opt,name=component_type,json=componentType,proto3,enum=types.ComponentType" json:"component_type,omitempty"`
	Timestamp         string        `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Acknowledged      bool          `protobuf:"varint,8,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`
}

func (x *HealthAlert) Reset() {
	*x = HealthAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthAlert) ProtoMessage() {}

func (x *HealthAlert) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthAlert.ProtoReflect.Descriptor instead.
func (*HealthAlert) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{35}
}

func (x *HealthAlert) GetAlertId() string {
	if x != nil {
		return x.AlertId
	}
	return ""
}

func (x *HealthAlert) GetSeverity() AlertSeverity {
	if x != nil {
		return x.Severity
	}
	return AlertSeverity_ALERT_SEVERITY_UNKNOWN
}

func (x *HealthAlert) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *HealthAlert) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HealthAlert) GetAffectedComponent() string {
	if x != nil {
		return x.AffectedComponent
	}
	return ""
}

func (x *HealthAlert) GetComponentType() ComponentType {
	if x != nil {
		return x.ComponentType
	}
	return ComponentType_COMPONENT_TYPE_UNKNOWN
}

func (x *HealthAlert) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *HealthAlert) GetAcknowledged() bool {
	if x != nil {
		return x.Acknowledged
	}
	return false
}

type HealthIssue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueId           string        `protobuf:"bytes,1,opt,name=issue_id,json=issueId,proto3" json:"issue_id,omitempty"`
	Severity          IssueSeverity `protobuf:"varint,2,opt,name=severity,proto3,enum=types.IssueSeverity" json:"severity,omitempty"`
	Category          IssueCategory `protobuf:"varint,3,opt,name=category,proto3,enum=types.IssueCategory" json:"category,omitempty"`
	Description       string        `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	AffectedComponent string        `protobuf:"bytes,5,opt,name=affected_component,json=affectedComponent,proto3" json:"affected_component,omitempty"`
	DetectionTime     string        `protobuf:"bytes,6,opt,name=detection_time,json=detectionTime,proto3" json:"detection_time,omitempty"`
	Resolved          bool          `protobuf:"varint,7,opt,name=resolved,proto3" json:"resolved,omitempty"`
}

func (x *HealthIssue) Reset() {
	*x = HealthIssue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthIssue) ProtoMessage() {}

func (x *HealthIssue) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthIssue.ProtoReflect.Descriptor instead.
func (*HealthIssue) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{36}
}

func (x *HealthIssue) GetIssueId() string {
	if x != nil {
		return x.IssueId
	}
	return ""
}

func (x *HealthIssue) GetSeverity() IssueSeverity {
	if x != nil {
		return x.Severity
	}
	return IssueSeverity_ISSUE_SEVERITY_UNKNOWN
}

func (x *HealthIssue) GetCategory() IssueCategory {
	if x != nil {
		return x.Category
	}
	return IssueCategory_ISSUE_CATEGORY_UNKNOWN
}

func (x *HealthIssue) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HealthIssue) GetAffectedComponent() string {
	if x != nil {
		return x.AffectedComponent
	}
	return ""
}

func (x *HealthIssue) GetDetectionTime() string {
	if x != nil {
		return x.DetectionTime
	}
	return ""
}

func (x *HealthIssue) GetResolved() bool {
	if x != nil {
		return x.Resolved
	}
	return false
}

type HealthRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecommendationId string                 `protobuf:"bytes,1,opt,name=recommendation_id,json=recommendationId,proto3" json:"recommendation_id,omitempty"`
	Type             RecommendationType     `protobuf:"varint,2,opt,name=type,proto3,enum=types.RecommendationType" json:"type,omitempty"`
	Title            string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description      string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Priority         RecommendationPriority `protobuf:"varint,5,opt,name=priority,proto3,enum=types.RecommendationPriority" json:"priority,omitempty"`
	TargetComponent  string                 `protobuf:"bytes,6,opt,name=target_component,json=targetComponent,proto3" json:"target_component,omitempty"`
	ActionItems      []string               `protobuf:"bytes,7,rep,name=action_items,json=actionItems,proto3" json:"action_items,omitempty"`
}

func (x *HealthRecommendation) Reset() {
	*x = HealthRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRecommendation) ProtoMessage() {}

func (x *HealthRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRecommendation.ProtoReflect.Descriptor instead.
func (*HealthRecommendation) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{37}
}

func (x *HealthRecommendation) GetRecommendationId() string {
	if x != nil {
		return x.RecommendationId
	}
	return ""
}

func (x *HealthRecommendation) GetType() RecommendationType {
	if x != nil {
		return x.Type
	}
	return RecommendationType_RECOMMENDATION_TYPE_UNKNOWN
}

func (x *HealthRecommendation) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *HealthRecommendation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HealthRecommendation) GetPriority() RecommendationPriority {
	if x != nil {
		return x.Priority
	}
	return RecommendationPriority_RECOMMENDATION_PRIORITY_UNKNOWN
}

func (x *HealthRecommendation) GetTargetComponent() string {
	if x != nil {
		return x.TargetComponent
	}
	return ""
}

func (x *HealthRecommendation) GetActionItems() []string {
	if x != nil {
		return x.ActionItems
	}
	return nil
}

type TrafficEngineeringInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeEnabled              bool        `protobuf:"varint,1,opt,name=te_enabled,json=teEnabled,proto3" json:"te_enabled,omitempty"`
	MaxReservableBandwidth uint64      `protobuf:"varint,2,opt,name=max_reservable_bandwidth,json=maxReservableBandwidth,proto3" json:"max_reservable_bandwidth,omitempty"`
	UnreservedBandwidth    []uint64    `protobuf:"varint,3,rep,packed,name=unreserved_bandwidth,json=unreservedBandwidth,proto3" json:"unreserved_bandwidth,omitempty"`
	TeTunnels              []*TeTunnel `protobuf:"bytes,4,rep,name=te_tunnels,json=teTunnels,proto3" json:"te_tunnels,omitempty"`
	RsvpInfo               *RsvpInfo   `protobuf:"bytes,5,opt,name=rsvp_info,json=rsvpInfo,proto3" json:"rsvp_info,omitempty"`
}

func (x *TrafficEngineeringInfo) Reset() {
	*x = TrafficEngineeringInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficEngineeringInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficEngineeringInfo) ProtoMessage() {}

func (x *TrafficEngineeringInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficEngineeringInfo.ProtoReflect.Descriptor instead.
func (*TrafficEngineeringInfo) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{38}
}

func (x *TrafficEngineeringInfo) GetTeEnabled() bool {
	if x != nil {
		return x.TeEnabled
	}
	return false
}

func (x *TrafficEngineeringInfo) GetMaxReservableBandwidth() uint64 {
	if x != nil {
		return x.MaxReservableBandwidth
	}
	return 0
}

func (x *TrafficEngineeringInfo) GetUnreservedBandwidth() []uint64 {
	if x != nil {
		return x.UnreservedBandwidth
	}
	return nil
}

func (x *TrafficEngineeringInfo) GetTeTunnels() []*TeTunnel {
	if x != nil {
		return x.TeTunnels
	}
	return nil
}

func (x *TrafficEngineeringInfo) GetRsvpInfo() *RsvpInfo {
	if x != nil {
		return x.RsvpInfo
	}
	return nil
}

type TeTunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TunnelId      string       `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	Name          string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Destination   string       `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	Source        string       `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Status        TunnelStatus `protobuf:"varint,5,opt,name=status,proto3,enum=types.TunnelStatus" json:"status,omitempty"`
	SetupPriority uint32       `protobuf:"varint,6,opt,name=setup_priority,json=setupPriority,proto3" json:"setup_priority,omitempty"`
	HoldPriority  uint32       `protobuf:"varint,7,opt,name=hold_priority,json=holdPriority,proto3" json:"hold_priority,omitempty"`
	Bandwidth     uint64       `protobuf:"varint,8,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	ExplicitPath  []string     `protobuf:"bytes,9,rep,name=explicit_path,json=explicitPath,proto3" json:"explicit_path,omitempty"`
	TunnelType    TunnelType   `protobuf:"varint,10,opt,name=tunnel_type,json=tunnelType,proto3,enum=types.TunnelType" json:"tunnel_type,omitempty"`
	Lsps          []*TeLsp     `protobuf:"bytes,11,rep,name=lsps,proto3" json:"lsps,omitempty"`
	Metrics       *TeMetrics   `protobuf:"bytes,12,opt,name=metrics,proto3" json:"metrics,omitempty"`
	SrPolicies    []*SrPolicy  `protobuf:"bytes,13,rep,name=sr_policies,json=srPolicies,proto3" json:"sr_policies,omitempty"`
}

func (x *TeTunnel) Reset() {
	*x = TeTunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeTunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeTunnel) ProtoMessage() {}

func (x *TeTunnel) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeTunnel.ProtoReflect.Descriptor instead.
func (*TeTunnel) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{39}
}

func (x *TeTunnel) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

func (x *TeTunnel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TeTunnel) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *TeTunnel) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TeTunnel) GetStatus() TunnelStatus {
	if x != nil {
		return x.Status
	}
	return TunnelStatus_TUNNEL_UNKNOWN
}

func (x *TeTunnel) GetSetupPriority() uint32 {
	if x != nil {
		return x.SetupPriority
	}
	return 0
}

func (x *TeTunnel) GetHoldPriority() uint32 {
	if x != nil {
		return x.HoldPriority
	}
	return 0
}

func (x *TeTunnel) GetBandwidth() uint64 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *TeTunnel) GetExplicitPath() []string {
	if x != nil {
		return x.ExplicitPath
	}
	return nil
}

func (x *TeTunnel) GetTunnelType() TunnelType {
	if x != nil {
		return x.TunnelType
	}
	return TunnelType_TUNNEL_TYPE_UNKNOWN
}

func (x *TeTunnel) GetLsps() []*TeLsp {
	if x != nil {
		return x.Lsps
	}
	return nil
}

func (x *TeTunnel) GetMetrics() *TeMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *TeTunnel) GetSrPolicies() []*SrPolicy {
	if x != nil {
		return x.SrPolicies
	}
	return nil
}

type TeLsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LspId     string     `protobuf:"bytes,1,opt,name=lsp_id,json=lspId,proto3" json:"lsp_id,omitempty"`
	Status    LspStatus  `protobuf:"varint,2,opt,name=status,proto3,enum=types.LspStatus" json:"status,omitempty"`
	PathHops  []string   `protobuf:"bytes,3,rep,name=path_hops,json=pathHops,proto3" json:"path_hops,omitempty"`
	Bandwidth uint64     `protobuf:"varint,4,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	Metrics   *TeMetrics `protobuf:"bytes,5,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *TeLsp) Reset() {
	*x = TeLsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeLsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeLsp) ProtoMessage() {}

func (x *TeLsp) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeLsp.ProtoReflect.Descriptor instead.
func (*TeLsp) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{40}
}

func (x *TeLsp) GetLspId() string {
	if x != nil {
		return x.LspId
	}
	return ""
}

func (x *TeLsp) GetStatus() LspStatus {
	if x != nil {
		return x.Status
	}
	return LspStatus_LSP_UNKNOWN
}

func (x *TeLsp) GetPathHops() []string {
	if x != nil {
		return x.PathHops
	}
	return nil
}

func (x *TeLsp) GetBandwidth() uint64 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *TeLsp) GetMetrics() *TeMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type RsvpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RsvpEnabled   bool               `protobuf:"varint,1,opt,name=rsvp_enabled,json=rsvpEnabled,proto3" json:"rsvp_enabled,omitempty"`
	HelloInterval uint32             `protobuf:"varint,2,opt,name=hello_interval,json=helloInterval,proto3" json:"hello_interval,omitempty"`
	HelloMissed   uint32             `protobuf:"varint,3,opt,name=hello_missed,json=helloMissed,proto3" json:"hello_missed,omitempty"`
	Sessions      []*RsvpSession     `protobuf:"bytes,4,rep,name=sessions,proto3" json:"sessions,omitempty"`
	Reservations  []*RsvpReservation `protobuf:"bytes,5,rep,name=reservations,proto3" json:"reservations,omitempty"`
}

func (x *RsvpInfo) Reset() {
	*x = RsvpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpInfo) ProtoMessage() {}

func (x *RsvpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpInfo.ProtoReflect.Descriptor instead.
func (*RsvpInfo) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{41}
}

func (x *RsvpInfo) GetRsvpEnabled() bool {
	if x != nil {
		return x.RsvpEnabled
	}
	return false
}

func (x *RsvpInfo) GetHelloInterval() uint32 {
	if x != nil {
		return x.HelloInterval
	}
	return 0
}

func (x *RsvpInfo) GetHelloMissed() uint32 {
	if x != nil {
		return x.HelloMissed
	}
	return 0
}

func (x *RsvpInfo) GetSessions() []*RsvpSession {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *RsvpInfo) GetReservations() []*RsvpReservation {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type RsvpSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId        string        `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Destination      string        `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	TunnelId         uint32        `protobuf:"varint,3,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	ExtendedTunnelId uint32        `protobuf:"varint,4,opt,name=extended_tunnel_id,json=extendedTunnelId,proto3" json:"extended_tunnel_id,omitempty"`
	Status           SessionStatus `protobuf:"varint,5,opt,name=status,proto3,enum=types.SessionStatus" json:"status,omitempty"`
}

func (x *RsvpSession) Reset() {
	*x = RsvpSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpSession) ProtoMessage() {}

func (x *RsvpSession) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpSession.ProtoReflect.Descriptor instead.
func (*RsvpSession) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{42}
}

func (x *RsvpSession) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *RsvpSession) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *RsvpSession) GetTunnelId() uint32 {
	if x != nil {
		return x.TunnelId
	}
	return 0
}

func (x *RsvpSession) GetExtendedTunnelId() uint32 {
	if x != nil {
		return x.ExtendedTunnelId
	}
	return 0
}

func (x *RsvpSession) GetStatus() SessionStatus {
	if x != nil {
		return x.Status
	}
	return SessionStatus_SESSION_UNKNOWN
}

type RsvpReservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReservationId string            `protobuf:"bytes,1,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"`
	SessionId     string            `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Bandwidth     uint64            `protobuf:"varint,3,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	SetupPriority uint32            `protobuf:"varint,4,opt,name=setup_priority,json=setupPriority,proto3" json:"setup_priority,omitempty"`
	HoldPriority  uint32            `protobuf:"varint,5,opt,name=hold_priority,json=holdPriority,proto3" json:"hold_priority,omitempty"`
	Status        ReservationStatus `protobuf:"varint,6,opt,name=status,proto3,enum=types.ReservationStatus" json:"status,omitempty"`
}

func (x *RsvpReservation) Reset() {
	*x = RsvpReservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpReservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpReservation) ProtoMessage() {}

func (x *RsvpReservation) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpReservation.ProtoReflect.Descriptor instead.
func (*RsvpReservation) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{43}
}

func (x *RsvpReservation) GetReservationId() string {
	if x != nil {
		return x.ReservationId
	}
	return ""
}

func (x *RsvpReservation) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *RsvpReservation) GetBandwidth() uint64 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *RsvpReservation) GetSetupPriority() uint32 {
	if x != nil {
		return x.SetupPriority
	}
	return 0
}

func (x *RsvpReservation) GetHoldPriority() uint32 {
	if x != nil {
		return x.HoldPriority
	}
	return 0
}

func (x *RsvpReservation) GetStatus() ReservationStatus {
	if x != nil {
		return x.Status
	}
	return ReservationStatus_RESERVATION_UNKNOWN
}

type QosInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies   []*QosPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	ClassMaps  []*ClassMap  `protobuf:"bytes,2,rep,name=class_maps,json=classMaps,proto3" json:"class_maps,omitempty"`
	PolicyMaps []*PolicyMap `protobuf:"bytes,3,rep,name=policy_maps,json=policyMaps,proto3" json:"policy_maps,omitempty"`
}

func (x *QosInfo) Reset() {
	*x = QosInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosInfo) ProtoMessage() {}

func (x *QosInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosInfo.ProtoReflect.Descriptor instead.
func (*QosInfo) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{44}
}

func (x *QosInfo) GetPolicies() []*QosPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *QosInfo) GetClassMaps() []*ClassMap {
	if x != nil {
		return x.ClassMaps
	}
	return nil
}

func (x *QosInfo) GetPolicyMaps() []*PolicyMap {
	if x != nil {
		return x.PolicyMaps
	}
	return nil
}

type QosPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Direction string          `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty"`
	Classes   []*QosClass     `protobuf:"bytes,3,rep,name=classes,proto3" json:"classes,omitempty"`
	Stats     *QosPolicyStats `protobuf:"bytes,4,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *QosPolicy) Reset() {
	*x = QosPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosPolicy) ProtoMessage() {}

func (x *QosPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosPolicy.ProtoReflect.Descriptor instead.
func (*QosPolicy) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{45}
}

func (x *QosPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QosPolicy) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *QosPolicy) GetClasses() []*QosClass {
	if x != nil {
		return x.Classes
	}
	return nil
}

func (x *QosPolicy) GetStats() *QosPolicyStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type ClassMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MatchType     string   `protobuf:"bytes,2,opt,name=match_type,json=matchType,proto3" json:"match_type,omitempty"`
	MatchCriteria []string `protobuf:"bytes,3,rep,name=match_criteria,json=matchCriteria,proto3" json:"match_criteria,omitempty"`
}

func (x *ClassMap) Reset() {
	*x = ClassMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassMap) ProtoMessage() {}

func (x *ClassMap) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassMap.ProtoReflect.Descriptor instead.
func (*ClassMap) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{46}
}

func (x *ClassMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClassMap) GetMatchType() string {
	if x != nil {
		return x.MatchType
	}
	return ""
}

func (x *ClassMap) GetMatchCriteria() []string {
	if x != nil {
		return x.MatchCriteria
	}
	return nil
}

type PolicyMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PolicyClasses []*PolicyClass `protobuf:"bytes,2,rep,name=policy_classes,json=policyClasses,proto3" json:"policy_classes,omitempty"`
}

func (x *PolicyMap) Reset() {
	*x = PolicyMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMap) ProtoMessage() {}

func (x *PolicyMap) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMap.ProtoReflect.Descriptor instead.
func (*PolicyMap) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{47}
}

func (x *PolicyMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicyMap) GetPolicyClasses() []*PolicyClass {
	if x != nil {
		return x.PolicyClasses
	}
	return nil
}

type PolicyClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName string       `protobuf:"bytes,1,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	Actions   []*QosAction `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *PolicyClass) Reset() {
	*x = PolicyClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyClass) ProtoMessage() {}

func (x *PolicyClass) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyClass.ProtoReflect.Descriptor instead.
func (*PolicyClass) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{48}
}

func (x *PolicyClass) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *PolicyClass) GetActions() []*QosAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type QosAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType  ActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=types.ActionType" json:"action_type,omitempty"`
	ActionValue string     `protobuf:"bytes,2,opt,name=action_value,json=actionValue,proto3" json:"action_value,omitempty"`
}

func (x *QosAction) Reset() {
	*x = QosAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosAction) ProtoMessage() {}

func (x *QosAction) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosAction.ProtoReflect.Descriptor instead.
func (*QosAction) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{49}
}

func (x *QosAction) GetActionType() ActionType {
	if x != nil {
		return x.ActionType
	}
	return ActionType_ACTION_UNKNOWN
}

func (x *QosAction) GetActionValue() string {
	if x != nil {
		return x.ActionValue
	}
	return ""
}

type QosClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName    string `protobuf:"bytes,1,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	OfferedRate  uint64 `protobuf:"varint,2,opt,name=offered_rate,json=offeredRate,proto3" json:"offered_rate,omitempty"`
	DropRate     uint64 `protobuf:"varint,3,opt,name=drop_rate,json=dropRate,proto3" json:"drop_rate,omitempty"`
	MatchPackets uint64 `protobuf:"varint,4,opt,name=match_packets,json=matchPackets,proto3" json:"match_packets,omitempty"`
	MatchBytes   uint64 `protobuf:"varint,5,opt,name=match_bytes,json=matchBytes,proto3" json:"match_bytes,omitempty"`
}

func (x *QosClass) Reset() {
	*x = QosClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosClass) ProtoMessage() {}

func (x *QosClass) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosClass.ProtoReflect.Descriptor instead.
func (*QosClass) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{50}
}

func (x *QosClass) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *QosClass) GetOfferedRate() uint64 {
	if x != nil {
		return x.OfferedRate
	}
	return 0
}

func (x *QosClass) GetDropRate() uint64 {
	if x != nil {
		return x.DropRate
	}
	return 0
}

func (x *QosClass) GetMatchPackets() uint64 {
	if x != nil {
		return x.MatchPackets
	}
	return 0
}

func (x *QosClass) GetMatchBytes() uint64 {
	if x != nil {
		return x.MatchBytes
	}
	return 0
}

type QosPolicyStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPackets uint64      `protobuf:"varint,1,opt,name=total_packets,json=totalPackets,proto3" json:"total_packets,omitempty"`
	TotalBytes   uint64      `protobuf:"varint,2,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	TotalDrops   uint64      `protobuf:"varint,3,opt,name=total_drops,json=totalDrops,proto3" json:"total_drops,omitempty"`
	ClassStats   []*QosClass `protobuf:"bytes,4,rep,name=class_stats,json=classStats,proto3" json:"class_stats,omitempty"`
}

func (x *QosPolicyStats) Reset() {
	*x = QosPolicyStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosPolicyStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosPolicyStats) ProtoMessage() {}

func (x *QosPolicyStats) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosPolicyStats.ProtoReflect.Descriptor instead.
func (*QosPolicyStats) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{51}
}

func (x *QosPolicyStats) GetTotalPackets() uint64 {
	if x != nil {
		return x.TotalPackets
	}
	return 0
}

func (x *QosPolicyStats) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *QosPolicyStats) GetTotalDrops() uint64 {
	if x != nil {
		return x.TotalDrops
	}
	return 0
}

func (x *QosPolicyStats) GetClassStats() []*QosClass {
	if x != nil {
		return x.ClassStats
	}
	return nil
}

type TeMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketsSent     uint64 `protobuf:"varint,1,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent,omitempty"`
	BytesSent       uint64 `protobuf:"varint,2,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	PacketsReceived uint64 `protobuf:"varint,3,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received,omitempty"`
	BytesReceived   uint64 `protobuf:"varint,4,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	SetupTime       uint64 `protobuf:"varint,5,opt,name=setup_time,json=setupTime,proto3" json:"setup_time,omitempty"`
	LastFlapTime    uint64 `protobuf:"varint,6,opt,name=last_flap_time,json=lastFlapTime,proto3" json:"last_flap_time,omitempty"`
	FlapCount       uint32 `protobuf:"varint,7,opt,name=flap_count,json=flapCount,proto3" json:"flap_count,omitempty"`
}

func (x *TeMetrics) Reset() {
	*x = TeMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeMetrics) ProtoMessage() {}

func (x *TeMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeMetrics.ProtoReflect.Descriptor instead.
func (*TeMetrics) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{52}
}

func (x *TeMetrics) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *TeMetrics) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *TeMetrics) GetPacketsReceived() uint64 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *TeMetrics) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *TeMetrics) GetSetupTime() uint64 {
	if x != nil {
		return x.SetupTime
	}
	return 0
}

func (x *TeMetrics) GetLastFlapTime() uint64 {
	if x != nil {
		return x.LastFlapTime
	}
	return 0
}

func (x *TeMetrics) GetFlapCount() uint32 {
	if x != nil {
		return x.FlapCount
	}
	return 0
}

// BGP Information
type BgpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgpEnabled bool        `protobuf:"varint,1,opt,name=bgp_enabled,json=bgpEnabled,proto3" json:"bgp_enabled,omitempty"`
	AsNumber   uint32      `protobuf:"varint,2,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	RouterId   string      `protobuf:"bytes,3,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	Peers      []*BgpPeer  `protobuf:"bytes,4,rep,name=peers,proto3" json:"peers,omitempty"`
	Routes     []*BgpRoute `protobuf:"bytes,5,rep,name=routes,proto3" json:"routes,omitempty"`
	Statistics *BgpStats   `protobuf:"bytes,6,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *BgpInfo) Reset() {
	*x = BgpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpInfo) ProtoMessage() {}

func (x *BgpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpInfo.ProtoReflect.Descriptor instead.
func (*BgpInfo) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{53}
}

func (x *BgpInfo) GetBgpEnabled() bool {
	if x != nil {
		return x.BgpEnabled
	}
	return false
}

func (x *BgpInfo) GetAsNumber() uint32 {
	if x != nil {
		return x.AsNumber
	}
	return 0
}

func (x *BgpInfo) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *BgpInfo) GetPeers() []*BgpPeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *BgpInfo) GetRoutes() []*BgpRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *BgpInfo) GetStatistics() *BgpStats {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type BgpPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId         string       `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	PeerIp         string       `protobuf:"bytes,2,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	PeerAs         uint32       `protobuf:"varint,3,opt,name=peer_as,json=peerAs,proto3" json:"peer_as,omitempty"`
	State          BgpPeerState `protobuf:"varint,4,opt,name=state,proto3,enum=types.BgpPeerState" json:"state,omitempty"`
	Uptime         uint32       `protobuf:"varint,5,opt,name=uptime,proto3" json:"uptime,omitempty"`
	RoutesReceived uint32       `protobuf:"varint,6,opt,name=routes_received,json=routesReceived,proto3" json:"routes_received,omitempty"`
	RoutesSent     uint32       `protobuf:"varint,7,opt,name=routes_sent,json=routesSent,proto3" json:"routes_sent,omitempty"`
	PeerType       BgpPeerType  `protobuf:"varint,8,opt,name=peer_type,json=peerType,proto3,enum=types.BgpPeerType" json:"peer_type,omitempty"`
}

func (x *BgpPeer) Reset() {
	*x = BgpPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPeer) ProtoMessage() {}

func (x *BgpPeer) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPeer.ProtoReflect.Descriptor instead.
func (*BgpPeer) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{54}
}

func (x *BgpPeer) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *BgpPeer) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *BgpPeer) GetPeerAs() uint32 {
	if x != nil {
		return x.PeerAs
	}
	return 0
}

func (x *BgpPeer) GetState() BgpPeerState {
	if x != nil {
		return x.State
	}
	return BgpPeerState_BGP_PEER_UNKNOWN
}

func (x *BgpPeer) GetUptime() uint32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *BgpPeer) GetRoutesReceived() uint32 {
	if x != nil {
		return x.RoutesReceived
	}
	return 0
}

func (x *BgpPeer) GetRoutesSent() uint32 {
	if x != nil {
		return x.RoutesSent
	}
	return 0
}

func (x *BgpPeer) GetPeerType() BgpPeerType {
	if x != nil {
		return x.PeerType
	}
	return BgpPeerType_BGP_PEER_TYPE_UNKNOWN
}

type BgpRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix          string    `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLength    uint32    `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	NextHop         string    `protobuf:"bytes,3,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	LocalPreference uint32    `protobuf:"varint,4,opt,name=local_preference,json=localPreference,proto3" json:"local_preference,omitempty"`
	Med             uint32    `protobuf:"varint,5,opt,name=med,proto3" json:"med,omitempty"`
	AsPath          []uint32  `protobuf:"varint,6,rep,packed,name=as_path,json=asPath,proto3" json:"as_path,omitempty"`
	Communities     []string  `protobuf:"bytes,7,rep,name=communities,proto3" json:"communities,omitempty"`
	Origin          BgpOrigin `protobuf:"varint,8,opt,name=origin,proto3,enum=types.BgpOrigin" json:"origin,omitempty"`
	BestPath        bool      `protobuf:"varint,9,opt,name=best_path,json=bestPath,proto3" json:"best_path,omitempty"`
}

func (x *BgpRoute) Reset() {
	*x = BgpRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRoute) ProtoMessage() {}

func (x *BgpRoute) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRoute.ProtoReflect.Descriptor instead.
func (*BgpRoute) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{55}
}

func (x *BgpRoute) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *BgpRoute) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *BgpRoute) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *BgpRoute) GetLocalPreference() uint32 {
	if x != nil {
		return x.LocalPreference
	}
	return 0
}

func (x *BgpRoute) GetMed() uint32 {
	if x != nil {
		return x.Med
	}
	return 0
}

func (x *BgpRoute) GetAsPath() []uint32 {
	if x != nil {
		return x.AsPath
	}
	return nil
}

func (x *BgpRoute) GetCommunities() []string {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *BgpRoute) GetOrigin() BgpOrigin {
	if x != nil {
		return x.Origin
	}
	return BgpOrigin_BGP_ORIGIN_UNKNOWN
}

func (x *BgpRoute) GetBestPath() bool {
	if x != nil {
		return x.BestPath
	}
	return false
}

type BgpStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRoutes      uint32 `protobuf:"varint,1,opt,name=total_routes,json=totalRoutes,proto3" json:"total_routes,omitempty"`
	ActiveRoutes     uint32 `protobuf:"varint,2,opt,name=active_routes,json=activeRoutes,proto3" json:"active_routes,omitempty"`
	TotalPeers       uint32 `protobuf:"varint,3,opt,name=total_peers,json=totalPeers,proto3" json:"total_peers,omitempty"`
	EstablishedPeers uint32 `protobuf:"varint,4,opt,name=established_peers,json=establishedPeers,proto3" json:"established_peers,omitempty"`
	UpdatesSent      uint64 `protobuf:"varint,5,opt,name=updates_sent,json=updatesSent,proto3" json:"updates_sent,omitempty"`
	UpdatesReceived  uint64 `protobuf:"varint,6,opt,name=updates_received,json=updatesReceived,proto3" json:"updates_received,omitempty"`
}

func (x *BgpStats) Reset() {
	*x = BgpStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpStats) ProtoMessage() {}

func (x *BgpStats) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpStats.ProtoReflect.Descriptor instead.
func (*BgpStats) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{56}
}

func (x *BgpStats) GetTotalRoutes() uint32 {
	if x != nil {
		return x.TotalRoutes
	}
	return 0
}

func (x *BgpStats) GetActiveRoutes() uint32 {
	if x != nil {
		return x.ActiveRoutes
	}
	return 0
}

func (x *BgpStats) GetTotalPeers() uint32 {
	if x != nil {
		return x.TotalPeers
	}
	return 0
}

func (x *BgpStats) GetEstablishedPeers() uint32 {
	if x != nil {
		return x.EstablishedPeers
	}
	return 0
}

func (x *BgpStats) GetUpdatesSent() uint64 {
	if x != nil {
		return x.UpdatesSent
	}
	return 0
}

func (x *BgpStats) GetUpdatesReceived() uint64 {
	if x != nil {
		return x.UpdatesReceived
	}
	return 0
}

// MPLS Information
type MplsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MplsEnabled     bool                 `protobuf:"varint,1,opt,name=mpls_enabled,json=mplsEnabled,proto3" json:"mpls_enabled,omitempty"`
	Labels          []*MplsLabel         `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	Fecs            []*MplsFec           `protobuf:"bytes,3,rep,name=fecs,proto3" json:"fecs,omitempty"`
	LdpSessions     []*LdpSession        `protobuf:"bytes,4,rep,name=ldp_sessions,json=ldpSessions,proto3" json:"ldp_sessions,omitempty"`
	ForwardingTable *MplsForwardingTable `protobuf:"bytes,5,opt,name=forwarding_table,json=forwardingTable,proto3" json:"forwarding_table,omitempty"`
}

func (x *MplsInfo) Reset() {
	*x = MplsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsInfo) ProtoMessage() {}

func (x *MplsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsInfo.ProtoReflect.Descriptor instead.
func (*MplsInfo) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{57}
}

func (x *MplsInfo) GetMplsEnabled() bool {
	if x != nil {
		return x.MplsEnabled
	}
	return false
}

func (x *MplsInfo) GetLabels() []*MplsLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MplsInfo) GetFecs() []*MplsFec {
	if x != nil {
		return x.Fecs
	}
	return nil
}

func (x *MplsInfo) GetLdpSessions() []*LdpSession {
	if x != nil {
		return x.LdpSessions
	}
	return nil
}

func (x *MplsInfo) GetForwardingTable() *MplsForwardingTable {
	if x != nil {
		return x.ForwardingTable
	}
	return nil
}

type MplsLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label             uint32        `protobuf:"varint,1,opt,name=label,proto3" json:"label,omitempty"`
	LabelType         MplsLabelType `protobuf:"varint,2,opt,name=label_type,json=labelType,proto3,enum=types.MplsLabelType" json:"label_type,omitempty"`
	Fec               string        `protobuf:"bytes,3,opt,name=fec,proto3" json:"fec,omitempty"`
	NextHop           string        `protobuf:"bytes,4,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	OutgoingInterface string        `protobuf:"bytes,5,opt,name=outgoing_interface,json=outgoingInterface,proto3" json:"outgoing_interface,omitempty"`
	IncomingLabel     uint32        `protobuf:"varint,6,opt,name=incoming_label,json=incomingLabel,proto3" json:"incoming_label,omitempty"`
	OutgoingLabel     uint32        `protobuf:"varint,7,opt,name=outgoing_label,json=outgoingLabel,proto3" json:"outgoing_label,omitempty"`
}

func (x *MplsLabel) Reset() {
	*x = MplsLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsLabel) ProtoMessage() {}

func (x *MplsLabel) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsLabel.ProtoReflect.Descriptor instead.
func (*MplsLabel) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{58}
}

func (x *MplsLabel) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *MplsLabel) GetLabelType() MplsLabelType {
	if x != nil {
		return x.LabelType
	}
	return MplsLabelType_MPLS_LABEL_UNKNOWN
}

func (x *MplsLabel) GetFec() string {
	if x != nil {
		return x.Fec
	}
	return ""
}

func (x *MplsLabel) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *MplsLabel) GetOutgoingInterface() string {
	if x != nil {
		return x.OutgoingInterface
	}
	return ""
}

func (x *MplsLabel) GetIncomingLabel() uint32 {
	if x != nil {
		return x.IncomingLabel
	}
	return 0
}

func (x *MplsLabel) GetOutgoingLabel() uint32 {
	if x != nil {
		return x.OutgoingLabel
	}
	return 0
}

type MplsFec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FecId        string       `protobuf:"bytes,1,opt,name=fec_id,json=fecId,proto3" json:"fec_id,omitempty"`
	Prefix       string       `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLength uint32       `protobuf:"varint,3,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	Labels       []*MplsLabel `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *MplsFec) Reset() {
	*x = MplsFec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsFec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsFec) ProtoMessage() {}

func (x *MplsFec) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsFec.ProtoReflect.Descriptor instead.
func (*MplsFec) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{59}
}

func (x *MplsFec) GetFecId() string {
	if x != nil {
		return x.FecId
	}
	return ""
}

func (x *MplsFec) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *MplsFec) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *MplsFec) GetLabels() []*MplsLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

type LdpSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId        string          `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	PeerIp           string          `protobuf:"bytes,2,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	State            LdpSessionState `protobuf:"varint,3,opt,name=state,proto3,enum=types.LdpSessionState" json:"state,omitempty"`
	Uptime           uint32          `protobuf:"varint,4,opt,name=uptime,proto3" json:"uptime,omitempty"`
	LabelsAdvertised uint32          `protobuf:"varint,5,opt,name=labels_advertised,json=labelsAdvertised,proto3" json:"labels_advertised,omitempty"`
	LabelsReceived   uint32          `protobuf:"varint,6,opt,name=labels_received,json=labelsReceived,proto3" json:"labels_received,omitempty"`
}

func (x *LdpSession) Reset() {
	*x = LdpSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LdpSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LdpSession) ProtoMessage() {}

func (x *LdpSession) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LdpSession.ProtoReflect.Descriptor instead.
func (*LdpSession) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{60}
}

func (x *LdpSession) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *LdpSession) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *LdpSession) GetState() LdpSessionState {
	if x != nil {
		return x.State
	}
	return LdpSessionState_LDP_SESSION_UNKNOWN
}

func (x *LdpSession) GetUptime() uint32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *LdpSession) GetLabelsAdvertised() uint32 {
	if x != nil {
		return x.LabelsAdvertised
	}
	return 0
}

func (x *LdpSession) GetLabelsReceived() uint32 {
	if x != nil {
		return x.LabelsReceived
	}
	return 0
}

type MplsForwardingTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries       []*MplsLabel `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	TotalEntries  uint32       `protobuf:"varint,2,opt,name=total_entries,json=totalEntries,proto3" json:"total_entries,omitempty"`
	ActiveEntries uint32       `protobuf:"varint,3,opt,name=active_entries,json=activeEntries,proto3" json:"active_entries,omitempty"`
}

func (x *MplsForwardingTable) Reset() {
	*x = MplsForwardingTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsForwardingTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsForwardingTable) ProtoMessage() {}

func (x *MplsForwardingTable) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsForwardingTable.ProtoReflect.Descriptor instead.
func (*MplsForwardingTable) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{61}
}

func (x *MplsForwardingTable) GetEntries() []*MplsLabel {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *MplsForwardingTable) GetTotalEntries() uint32 {
	if x != nil {
		return x.TotalEntries
	}
	return 0
}

func (x *MplsForwardingTable) GetActiveEntries() uint32 {
	if x != nil {
		return x.ActiveEntries
	}
	return 0
}

// Segment Routing (SR) Policies
type SrPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId   string           `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Name       string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Endpoint   string           `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Color      uint32           `protobuf:"varint,4,opt,name=color,proto3" json:"color,omitempty"`
	Status     SrPolicyStatus   `protobuf:"varint,5,opt,name=status,proto3,enum=types.SrPolicyStatus" json:"status,omitempty"`
	Paths      []*SrPath        `protobuf:"bytes,6,rep,name=paths,proto3" json:"paths,omitempty"`
	Metrics    *SrPolicyMetrics `protobuf:"bytes,7,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Preference uint32           `protobuf:"varint,8,opt,name=preference,proto3" json:"preference,omitempty"`
	BindingSid string           `protobuf:"bytes,9,opt,name=binding_sid,json=bindingSid,proto3" json:"binding_sid,omitempty"`
}

func (x *SrPolicy) Reset() {
	*x = SrPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrPolicy) ProtoMessage() {}

func (x *SrPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrPolicy.ProtoReflect.Descriptor instead.
func (*SrPolicy) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{62}
}

func (x *SrPolicy) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *SrPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SrPolicy) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *SrPolicy) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *SrPolicy) GetStatus() SrPolicyStatus {
	if x != nil {
		return x.Status
	}
	return SrPolicyStatus_SR_POLICY_UNKNOWN
}

func (x *SrPolicy) GetPaths() []*SrPath {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *SrPolicy) GetMetrics() *SrPolicyMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *SrPolicy) GetPreference() uint32 {
	if x != nil {
		return x.Preference
	}
	return 0
}

func (x *SrPolicy) GetBindingSid() string {
	if x != nil {
		return x.BindingSid
	}
	return ""
}

type SrPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathId   string         `protobuf:"bytes,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Status   SrPathStatus   `protobuf:"varint,2,opt,name=status,proto3,enum=types.SrPathStatus" json:"status,omitempty"`
	Weight   uint32         `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Segments []*SrSegment   `protobuf:"bytes,4,rep,name=segments,proto3" json:"segments,omitempty"`
	Metrics  *SrPathMetrics `protobuf:"bytes,5,opt,name=metrics,proto3" json:"metrics,omitempty"`
	IsValid  bool           `protobuf:"varint,6,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
}

func (x *SrPath) Reset() {
	*x = SrPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrPath) ProtoMessage() {}

func (x *SrPath) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrPath.ProtoReflect.Descriptor instead.
func (*SrPath) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{63}
}

func (x *SrPath) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

func (x *SrPath) GetStatus() SrPathStatus {
	if x != nil {
		return x.Status
	}
	return SrPathStatus_SR_PATH_UNKNOWN
}

func (x *SrPath) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *SrPath) GetSegments() []*SrSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *SrPath) GetMetrics() *SrPathMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *SrPath) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

type SrSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentType SrSegmentType `protobuf:"varint,1,opt,name=segment_type,json=segmentType,proto3,enum=types.SrSegmentType" json:"segment_type,omitempty"`
	Sid         uint32        `protobuf:"varint,2,opt,name=sid,proto3" json:"sid,omitempty"`
	NodeId      string        `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	InterfaceId string        `protobuf:"bytes,4,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
}

func (x *SrSegment) Reset() {
	*x = SrSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrSegment) ProtoMessage() {}

func (x *SrSegment) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrSegment.ProtoReflect.Descriptor instead.
func (*SrSegment) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{64}
}

func (x *SrSegment) GetSegmentType() SrSegmentType {
	if x != nil {
		return x.SegmentType
	}
	return SrSegmentType_SR_SEGMENT_UNKNOWN
}

func (x *SrSegment) GetSid() uint32 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *SrSegment) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *SrSegment) GetInterfaceId() string {
	if x != nil {
		return x.InterfaceId
	}
	return ""
}

type SrPolicyMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketsSteered uint64 `protobuf:"varint,1,opt,name=packets_steered,json=packetsSteered,proto3" json:"packets_steered,omitempty"`
	BytesSteered   uint64 `protobuf:"varint,2,opt,name=bytes_steered,json=bytesSteered,proto3" json:"bytes_steered,omitempty"`
	PacketsDropped uint64 `protobuf:"varint,3,opt,name=packets_dropped,json=packetsDropped,proto3" json:"packets_dropped,omitempty"`
	PathSwitches   uint32 `protobuf:"varint,4,opt,name=path_switches,json=pathSwitches,proto3" json:"path_switches,omitempty"`
}

func (x *SrPolicyMetrics) Reset() {
	*x = SrPolicyMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrPolicyMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrPolicyMetrics) ProtoMessage() {}

func (x *SrPolicyMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrPolicyMetrics.ProtoReflect.Descriptor instead.
func (*SrPolicyMetrics) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{65}
}

func (x *SrPolicyMetrics) GetPacketsSteered() uint64 {
	if x != nil {
		return x.PacketsSteered
	}
	return 0
}

func (x *SrPolicyMetrics) GetBytesSteered() uint64 {
	if x != nil {
		return x.BytesSteered
	}
	return 0
}

func (x *SrPolicyMetrics) GetPacketsDropped() uint64 {
	if x != nil {
		return x.PacketsDropped
	}
	return 0
}

func (x *SrPolicyMetrics) GetPathSwitches() uint32 {
	if x != nil {
		return x.PathSwitches
	}
	return 0
}

type SrPathMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketsForwarded   uint64 `protobuf:"varint,1,opt,name=packets_forwarded,json=packetsForwarded,proto3" json:"packets_forwarded,omitempty"`
	BytesForwarded     uint64 `protobuf:"varint,2,opt,name=bytes_forwarded,json=bytesForwarded,proto3" json:"bytes_forwarded,omitempty"`
	UtilizationPercent uint32 `protobuf:"varint,3,opt,name=utilization_percent,json=utilizationPercent,proto3" json:"utilization_percent,omitempty"`
}

func (x *SrPathMetrics) Reset() {
	*x = SrPathMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrPathMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrPathMetrics) ProtoMessage() {}

func (x *SrPathMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrPathMetrics.ProtoReflect.Descriptor instead.
func (*SrPathMetrics) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{66}
}

func (x *SrPathMetrics) GetPacketsForwarded() uint64 {
	if x != nil {
		return x.PacketsForwarded
	}
	return 0
}

func (x *SrPathMetrics) GetBytesForwarded() uint64 {
	if x != nil {
		return x.BytesForwarded
	}
	return 0
}

func (x *SrPathMetrics) GetUtilizationPercent() uint32 {
	if x != nil {
		return x.UtilizationPercent
	}
	return 0
}

// Additional message for RegionHealth
type RegionHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         HealthStatus   `protobuf:"varint,1,opt,name=status,proto3,enum=types.HealthStatus" json:"status,omitempty"`
	HealthScore    float64        `protobuf:"fixed64,2,opt,name=health_score,json=healthScore,proto3" json:"health_score,omitempty"`
	HealthyNodes   uint32         `protobuf:"varint,3,opt,name=healthy_nodes,json=healthyNodes,proto3" json:"healthy_nodes,omitempty"`
	UnhealthyNodes uint32         `protobuf:"varint,4,opt,name=unhealthy_nodes,json=unhealthyNodes,proto3" json:"unhealthy_nodes,omitempty"`
	ActiveLinks    uint32         `protobuf:"varint,5,opt,name=active_links,json=activeLinks,proto3" json:"active_links,omitempty"`
	FailedLinks    uint32         `protobuf:"varint,6,opt,name=failed_links,json=failedLinks,proto3" json:"failed_links,omitempty"`
	Alerts         []*HealthAlert `protobuf:"bytes,7,rep,name=alerts,proto3" json:"alerts,omitempty"`
	LastAssessment string         `protobuf:"bytes,8,opt,name=last_assessment,json=lastAssessment,proto3" json:"last_assessment,omitempty"`
}

func (x *RegionHealth) Reset() {
	*x = RegionHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionHealth) ProtoMessage() {}

func (x *RegionHealth) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionHealth.ProtoReflect.Descriptor instead.
func (*RegionHealth) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{67}
}

func (x *RegionHealth) GetStatus() HealthStatus {
	if x != nil {
		return x.Status
	}
	return HealthStatus_HEALTH_STATUS_UNKNOWN
}

func (x *RegionHealth) GetHealthScore() float64 {
	if x != nil {
		return x.HealthScore
	}
	return 0
}

func (x *RegionHealth) GetHealthyNodes() uint32 {
	if x != nil {
		return x.HealthyNodes
	}
	return 0
}

func (x *RegionHealth) GetUnhealthyNodes() uint32 {
	if x != nil {
		return x.UnhealthyNodes
	}
	return 0
}

func (x *RegionHealth) GetActiveLinks() uint32 {
	if x != nil {
		return x.ActiveLinks
	}
	return 0
}

func (x *RegionHealth) GetFailedLinks() uint32 {
	if x != nil {
		return x.FailedLinks
	}
	return 0
}

func (x *RegionHealth) GetAlerts() []*HealthAlert {
	if x != nil {
		return x.Alerts
	}
	return nil
}

func (x *RegionHealth) GetLastAssessment() string {
	if x != nil {
		return x.LastAssessment
	}
	return ""
}

var File_inventory_proto protoreflect.FileDescriptor

var file_inventory_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa4, 0x04, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0d, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x37, 0x0a, 0x0d,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x1a, 0x4d, 0x0a, 0x0e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x4b, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb,
	0x04, 0x0a, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x79,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x5f, 0x6f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x4f, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x38, 0x0a,
	0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x65, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xff, 0x01, 0x0a,
	0x08, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x52, 0x07, 0x63, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x0d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x12, 0x1e, 0x0a, 0x04, 0x66, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6e, 0x52, 0x04, 0x66, 0x61, 0x6e,
	0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x49,
	0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0x92, 0x03, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x39, 0x0a, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x0d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x04,
	0x66, 0x61, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x46, 0x61, 0x6e, 0x52, 0x04, 0x66, 0x61, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x60,
	0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x22, 0x88, 0x03, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0b,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x63, 0x70, 0x75, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x52, 0x04, 0x63,
	0x70, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x48, 0x0a, 0x04, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0xa9, 0x04, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x29, 0x0a, 0x08, 0x71, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x71, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x08,
	0x62, 0x67, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x62, 0x67, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x09, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x70, 0x6c,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x22, 0xa1, 0x02, 0x0a, 0x03, 0x43, 0x70, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x68, 0x7a, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d,
	0x68, 0x7a, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x68, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x68, 0x7a, 0x12, 0x2e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x13,
	0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x75, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xe0, 0x02,
	0x0a, 0x0b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x61, 0x74, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x77,
	0x61, 0x74, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x22, 0x85, 0x02, 0x0a, 0x03, 0x46, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x70, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x70, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x70, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x70, 0x6d, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0x90, 0x02, 0x0a, 0x12, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x70, 0x75, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x13, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x65, 0x6c,
	0x73, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x99, 0x02, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x78, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72,
	0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x78, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x72, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74,
	0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x78, 0x44, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe4, 0x03,
	0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x64,
	0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x64, 0x67, 0x65, 0x52, 0x05, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x10, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x22, 0xee, 0x03, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x3e,
	0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x69, 0x65, 0x72, 0x22, 0xa4, 0x04, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x09, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x2f, 0x0a, 0x13, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x6d,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4b, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xa5, 0x02, 0x0a,
	0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x64, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x64, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x64,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x35, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x64, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x22, 0xe1, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x5f,
	0x65, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x09, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x45,
	0x61, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x5f, 0x77, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x57, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x06,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x7a, 0x6f, 0x6f, 0x6d,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xcf, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x09, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x09, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x6d,
	0x12, 0x2c, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb7, 0x02, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x22, 0xbe, 0x04, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x06,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x22, 0xb1, 0x03, 0x0a, 0x12, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x64, 0x67, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x67, 0x72, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x67,
	0x72, 0x65, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x22, 0xda, 0x02,
	0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x62,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x54, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x42, 0x70, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x92, 0x03, 0x0a, 0x0b, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x70,
	0x75, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x10, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22,
	0xa5, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x78,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x78,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2f,
	0x0a, 0x13, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x9c, 0x03, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x72,
	0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x4d, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c,
	0x6f, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70,
	0x75, 0x74, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x42, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x0e, 0x45, 0x64, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x45, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x75, 0x0a, 0x0a, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xfc, 0x01, 0x0a, 0x0e, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc0, 0x02, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12,
	0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x22, 0xa0, 0x02, 0x0a, 0x0b, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x22, 0xb3, 0x02,
	0x0a, 0x14, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x38, 0x0a,
	0x18, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x14, 0x75, 0x6e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x13, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x65,
	0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x09, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x72, 0x73,
	0x76, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x72, 0x73, 0x76, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe5, 0x03, 0x0a, 0x08, 0x54, 0x65, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x6f, 0x6c,
	0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x0b,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x04, 0x6c, 0x73, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x4c, 0x73, 0x70, 0x52, 0x04, 0x6c, 0x73,
	0x70, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x30,
	0x0a, 0x0b, 0x73, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a, 0x73, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x22, 0xaf, 0x01, 0x0a, 0x05, 0x54, 0x65, 0x4c, 0x73, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x73,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x73, 0x70, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x74, 0x68, 0x48, 0x6f, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x54, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x08, 0x52, 0x73, 0x76, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x73, 0x76, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x08,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x0b, 0x52, 0x73, 0x76,
	0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x0f, 0x52, 0x73, 0x76, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x74, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x07, 0x51, 0x6f, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61,
	0x70, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4d, 0x61, 0x70, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x09, 0x51, 0x6f, 0x73, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x64, 0x0a,
	0x08, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x22, 0x5a, 0x0a, 0x09, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22,
	0x58, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x62, 0x0a, 0x09, 0x51, 0x6f, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xaf, 0x01,
	0x0a, 0x08, 0x51, 0x6f, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22,
	0xa9, 0x01, 0x0a, 0x0e, 0x51, 0x6f, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x09,
	0x54, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x65, 0x74, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xe4, 0x01, 0x0a, 0x07, 0x42, 0x67, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x67, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x62, 0x67, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x27,
	0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x07, 0x42, 0x67, 0x70,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x41, 0x73, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x09,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa1, 0x02,
	0x0a, 0x08, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x65, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x06, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x42, 0x67, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x22, 0xee, 0x01, 0x0a, 0x08, 0x42, 0x67, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x08, 0x4d, 0x70, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x70, 0x6c, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x04,
	0x66, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x65, 0x63, 0x52, 0x04, 0x66, 0x65, 0x63, 0x73,
	0x12, 0x34, 0x0a, 0x0c, 0x6c, 0x64, 0x70, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c,
	0x64, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6c, 0x64, 0x70, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x80, 0x02,
	0x0a, 0x09, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x33, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x70,
	0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x75, 0x74,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x22, 0x87, 0x01, 0x0a, 0x07, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x65, 0x63, 0x12, 0x15, 0x0a, 0x06,
	0x66, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x65,
	0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x28, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x0a, 0x4c,
	0x64, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x70, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x64, 0x70, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0x8d, 0x01,
	0x0a, 0x13, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d,
	0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xb4, 0x02,
	0x0a, 0x08, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2d, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x05,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x72, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x69, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x06, 0x53, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x72, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a,
	0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x72, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x09, 0x53, 0x72, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x53, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x0f,
	0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x53, 0x74, 0x65, 0x65, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x73, 0x74, 0x65, 0x65, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x74, 0x65, 0x65, 0x72, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70,
	0x61, 0x74, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0d,
	0x53, 0x72, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x22, 0xc7, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x06, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2a, 0x59,
	0x0a, 0x0c, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x55, 0x50, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x2a, 0x67, 0x0a, 0x0a, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x32, 0x50, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x4d, 0x50, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x32, 0x4d, 0x50,
	0x10, 0x03, 0x2a, 0x4e, 0x0a, 0x09, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x53, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x53, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x53, 0x50, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x53, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x2a, 0x62, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x76, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x52,
	0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xc9,
	0x01, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x44, 0x53, 0x43, 0x50, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x48, 0x41, 0x50, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10,
	0x06, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x55,
	0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x08, 0x2a, 0xad, 0x01, 0x0a, 0x0c, 0x42,
	0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x42,
	0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x49, 0x44,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x47,
	0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x53, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45,
	0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x05,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x45, 0x53, 0x54,
	0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x60, 0x0a, 0x0b, 0x42, 0x67,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x47, 0x50,
	0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x66, 0x0a, 0x09,
	0x42, 0x67, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50,
	0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x47, 0x50, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f,
	0x49, 0x47, 0x50, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x47, 0x50, 0x5f, 0x4f, 0x52, 0x49,
	0x47, 0x49, 0x4e, 0x5f, 0x45, 0x47, 0x50, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x47, 0x50,
	0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x03, 0x2a, 0x92, 0x01, 0x0a, 0x0d, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x43, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4c, 0x44, 0x50, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f,
	0x52, 0x53, 0x56, 0x50, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x5f, 0x53, 0x52, 0x10, 0x05, 0x2a, 0xb4, 0x01, 0x0a, 0x0f, 0x4c, 0x64,
	0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x4c, 0x44, 0x50, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x44, 0x50, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x58, 0x49, 0x53, 0x54, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x44, 0x50, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x4c, 0x44, 0x50, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x52, 0x45, 0x43, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x44, 0x50,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x45, 0x4e,
	0x54, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x44, 0x50, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x05,
	0x2a, 0x67, 0x0a, 0x0e, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x52, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x2a, 0x62, 0x0a, 0x0c, 0x53, 0x72, 0x50,
	0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x52, 0x5f,
	0x50, 0x41, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x52, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x52, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x49, 0x4e,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x52, 0x5f, 0x50,
	0x41, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x2a, 0x6e, 0x0a,
	0x0d, 0x53, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x52, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45,
	0x4e, 0x43, 0x59, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0xf6, 0x01,
	0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12,
	0x1d, 0x0a, 0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1c,
	0x0a, 0x18, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x07, 0x12, 0x17, 0x0a,
	0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x57, 0x41, 0x59, 0x10, 0x08, 0x2a, 0xb4, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46,
	0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x1d,
	0x0a, 0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x2a, 0xe1, 0x01,
	0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x52,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10,
	0x04, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x05, 0x12,
	0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10,
	0x06, 0x2a, 0xae, 0x02, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x49,
	0x53, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x10, 0x08, 0x2a, 0xda, 0x03, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x41, 0x53, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x02, 0x12,
	0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x49, 0x47, 0x41, 0x42, 0x49, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x30, 0x47, 0x49, 0x47, 0x45, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x32, 0x35, 0x47, 0x49, 0x47, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x34, 0x30, 0x47,
	0x49, 0x47, 0x45, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x49, 0x47, 0x45, 0x10,
	0x07, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x54, 0x4d, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x4c,
	0x41, 0x59, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x10,
	0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0c,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4c,
	0x41, 0x4e, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0x0f, 0x2a,
	0xa5, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x43, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x45, 0x10, 0x03, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x44, 0x55, 0x4e, 0x44, 0x41, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x4f, 0x4c, 0x41, 0x52, 0x10, 0x06, 0x2a, 0xf8, 0x01, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x4f, 0x50, 0x4f,
	0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x4f,
	0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x32, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x33, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f,
	0x47, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x10,
	0x05, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x10, 0x06, 0x12, 0x19, 0x0a,
	0x15, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x4f, 0x50, 0x4f,
	0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c,
	0x10, 0x08, 0x2a, 0xd4, 0x02, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10,
	0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x10,
	0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x04, 0x12,
	0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43,
	0x45, 0x52, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41,
	0x59, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x09, 0x2a, 0xca, 0x01, 0x0a, 0x11, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x49, 0x4e,
	0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x2a, 0xbe, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45,
	0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x06, 0x2a, 0xfd, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x52, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41,
	0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x50, 0x4e,
	0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4e, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x4e, 0x10, 0x09, 0x12,
	0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x42, 0x4f, 0x4e, 0x45, 0x10, 0x0a, 0x2a, 0xae, 0x01, 0x0a, 0x08, 0x45, 0x64, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x44, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x44,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x10,
	0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x44, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10,
	0x05, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x06, 0x2a, 0x9c, 0x01, 0x0a, 0x0a, 0x45, 0x64, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x44, 0x47, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x50, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x44,
	0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x4c, 0x41,
	0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x2a, 0xca, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x41, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x44, 0x55, 0x4e, 0x44, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41,
	0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x03,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54,
	0x45, 0x53, 0x54, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x45, 0x53, 0x54, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x41, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x41, 0x50, 0x45,
	0x53, 0x54, 0x10, 0x07, 0x2a, 0x81, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x49, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x47, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x47, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x47,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x55, 0x53, 0x10,
	0x06, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x52,
	0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x41, 0x43, 0x4b, 0x10, 0x09, 0x2a, 0xd0, 0x01, 0x0a, 0x0c, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x45, 0x41,
	0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x45,
	0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x1a, 0x0a, 0x16, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19,
	0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x06, 0x2a, 0x89, 0x02, 0x0a, 0x0f,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x20,
	0x0a, 0x1c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x06,
	0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x2a, 0xb5, 0x01, 0x0a, 0x0d, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4a,
	0x4f, 0x52, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10,
	0x04, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x05, 0x2a,
	0xf0, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x03, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e,
	0x10, 0x07, 0x2a, 0x94, 0x01, 0x0a, 0x0d, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x53, 0x53, 0x55,
	0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x2a, 0x82, 0x02, 0x0a, 0x0d, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x49,
	0x53, 0x53, 0x55, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x53, 0x53, 0x55, 0x45,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x53, 0x53, 0x55,
	0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x53, 0x53, 0x55,
	0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x53, 0x53, 0x55, 0x45,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41,
	0x52, 0x45, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x10,
	0x06, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x10, 0x07, 0x2a, 0x8b,
	0x02, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45,
	0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x24,
	0x0a, 0x20, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e,
	0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50,
	0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x06, 0x2a, 0xc8, 0x01, 0x0a,
	0x16, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x02, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55,
	0x52, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x42, 0x27, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x42, 0x05,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x01, 0x5a, 0x07, 0x2e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inventory_proto_rawDescOnce sync.Once
	file_inventory_proto_rawDescData = file_inventory_proto_rawDesc
)

func file_inventory_proto_rawDescGZIP() []byte {
	file_inventory_proto_rawDescOnce.Do(func() {
		file_inventory_proto_rawDescData = protoimpl.X.CompressGZIP(file_inventory_proto_rawDescData)
	})
	return file_inventory_proto_rawDescData
}

var file_inventory_proto_enumTypes = make([]protoimpl.EnumInfo, 37)
var file_inventory_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_inventory_proto_goTypes = []interface{}{
	(TunnelStatus)(0),              // 0: types.TunnelStatus
	(TunnelType)(0),                // 1: types.TunnelType
	(LspStatus)(0),                 // 2: types.LspStatus
	(SessionStatus)(0),             // 3: types.SessionStatus
	(ReservationStatus)(0),         // 4: types.ReservationStatus
	(ActionType)(0),                // 5: types.ActionType
	(BgpPeerState)(0),              // 6: types.BgpPeerState
	(BgpPeerType)(0),               // 7: types.BgpPeerType
	(BgpOrigin)(0),                 // 8: types.BgpOrigin
	(MplsLabelType)(0),             // 9: types.MplsLabelType
	(LdpSessionState)(0),           // 10: types.LdpSessionState
	(SrPolicyStatus)(0),            // 11: types.SrPolicyStatus
	(SrPathStatus)(0),              // 12: types.SrPathStatus
	(SrSegmentType)(0),             // 13: types.SrSegmentType
	(DeviceType)(0),                // 14: types.DeviceType
	(DeviceStatus)(0),              // 15: types.DeviceStatus
	(ComponentStatus)(0),           // 16: types.ComponentStatus
	(ModuleType)(0),                // 17: types.ModuleType
	(InterfaceType)(0),             // 18: types.InterfaceType
	(PowerType)(0),                 // 19: types.PowerType
	(TopologyType)(0),              // 20: types.TopologyType
	(NetworkNodeType)(0),           // 21: types.NetworkNodeType
	(NetworkNodeStatus)(0),         // 22: types.NetworkNodeStatus
	(LinkStatus)(0),                // 23: types.LinkStatus
	(LinkType)(0),                  // 24: types.LinkType
	(EdgeType)(0),                  // 25: types.EdgeType
	(EdgeStatus)(0),                // 26: types.EdgeStatus
	(PathType)(0),                  // 27: types.PathType
	(RegionType)(0),                // 28: types.RegionType
	(HealthStatus)(0),              // 29: types.HealthStatus
	(InterfaceStatus)(0),           // 30: types.InterfaceStatus
	(AlertSeverity)(0),             // 31: types.AlertSeverity
	(ComponentType)(0),             // 32: types.ComponentType
	(IssueSeverity)(0),             // 33: types.IssueSeverity
	(IssueCategory)(0),             // 34: types.IssueCategory
	(RecommendationType)(0),        // 35: types.RecommendationType
	(RecommendationPriority)(0),    // 36: types.RecommendationPriority
	(*NetworkDeviceList)(nil),      // 37: types.NetworkDeviceList
	(*NetworkDevice)(nil),          // 38: types.NetworkDevice
	(*EquipmentInfo)(nil),          // 39: types.EquipmentInfo
	(*Physical)(nil),               // 40: types.Physical
	(*Logical)(nil),                // 41: types.Logical
	(*Chassis)(nil),                // 42: types.Chassis
	(*Slot)(nil),                   // 43: types.Slot
	(*Module)(nil),                 // 44: types.Module
	(*Port)(nil),                   // 45: types.Port
	(*Interface)(nil),              // 46: types.Interface
	(*Cpu)(nil),                    // 47: types.Cpu
	(*Memory)(nil),                 // 48: types.Memory
	(*PowerSupply)(nil),            // 49: types.PowerSupply
	(*Fan)(nil),                    // 50: types.Fan
	(*PerformanceMetrics)(nil),     // 51: types.PerformanceMetrics
	(*ProcessInfo)(nil),            // 52: types.ProcessInfo
	(*InterfaceStatistics)(nil),    // 53: types.InterfaceStatistics
	(*NetworkTopology)(nil),        // 54: types.NetworkTopology
	(*NetworkNode)(nil),            // 55: types.NetworkNode
	(*NetworkLink)(nil),            // 56: types.NetworkLink
	(*NetworkEdge)(nil),            // 57: types.NetworkEdge
	(*GeographicCoordinates)(nil),  // 58: types.GeographicCoordinates
	(*GeographicBounds)(nil),       // 59: types.GeographicBounds
	(*GeographicPath)(nil),         // 60: types.GeographicPath
	(*NetworkRegion)(nil),          // 61: types.NetworkRegion
	(*NetworkHealth)(nil),          // 62: types.NetworkHealth
	(*TopologyStatistics)(nil),     // 63: types.TopologyStatistics
	(*RegionStatistics)(nil),       // 64: types.RegionStatistics
	(*NodeCapabilities)(nil),       // 65: types.NodeCapabilities
	(*NodeMetrics)(nil),            // 66: types.NodeMetrics
	(*InterfaceMetric)(nil),        // 67: types.InterfaceMetric
	(*LinkMetrics)(nil),            // 68: types.LinkMetrics
	(*EdgeProperties)(nil),         // 69: types.EdgeProperties
	(*EdgeMetric)(nil),             // 70: types.EdgeMetric
	(*TopologyHealth)(nil),         // 71: types.TopologyHealth
	(*HealthAlert)(nil),            // 72: types.HealthAlert
	(*HealthIssue)(nil),            // 73: types.HealthIssue
	(*HealthRecommendation)(nil),   // 74: types.HealthRecommendation
	(*TrafficEngineeringInfo)(nil), // 75: types.TrafficEngineeringInfo
	(*TeTunnel)(nil),               // 76: types.TeTunnel
	(*TeLsp)(nil),                  // 77: types.TeLsp
	(*RsvpInfo)(nil),               // 78: types.RsvpInfo
	(*RsvpSession)(nil),            // 79: types.RsvpSession
	(*RsvpReservation)(nil),        // 80: types.RsvpReservation
	(*QosInfo)(nil),                // 81: types.QosInfo
	(*QosPolicy)(nil),              // 82: types.QosPolicy
	(*ClassMap)(nil),               // 83: types.ClassMap
	(*PolicyMap)(nil),              // 84: types.PolicyMap
	(*PolicyClass)(nil),            // 85: types.PolicyClass
	(*QosAction)(nil),              // 86: types.QosAction
	(*QosClass)(nil),               // 87: types.QosClass
	(*QosPolicyStats)(nil),         // 88: types.QosPolicyStats
	(*TeMetrics)(nil),              // 89: types.TeMetrics
	(*BgpInfo)(nil),                // 90: types.BgpInfo
	(*BgpPeer)(nil),                // 91: types.BgpPeer
	(*BgpRoute)(nil),               // 92: types.BgpRoute
	(*BgpStats)(nil),               // 93: types.BgpStats
	(*MplsInfo)(nil),               // 94: types.MplsInfo
	(*MplsLabel)(nil),              // 95: types.MplsLabel
	(*MplsFec)(nil),                // 96: types.MplsFec
	(*LdpSession)(nil),             // 97: types.LdpSession
	(*MplsForwardingTable)(nil),    // 98: types.MplsForwardingTable
	(*SrPolicy)(nil),               // 99: types.SrPolicy
	(*SrPath)(nil),                 // 100: types.SrPath
	(*SrSegment)(nil),              // 101: types.SrSegment
	(*SrPolicyMetrics)(nil),        // 102: types.SrPolicyMetrics
	(*SrPathMetrics)(nil),          // 103: types.SrPathMetrics
	(*RegionHealth)(nil),           // 104: types.RegionHealth
	nil,                            // 105: types.NetworkDevice.PhysicalsEntry
	nil,                            // 106: types.NetworkDevice.LogicalsEntry
	nil,                            // 107: types.EdgeProperties.AttributesEntry
}
var file_inventory_proto_depIdxs = []int32{
	38,  // 0: types.NetworkDeviceList.list:type_name -> types.NetworkDevice
	39,  // 1: types.NetworkDevice.equipmentinfo:type_name -> types.EquipmentInfo
	105, // 2: types.NetworkDevice.physicals:type_name -> types.NetworkDevice.PhysicalsEntry
	106, // 3: types.NetworkDevice.logicals:type_name -> types.NetworkDevice.LogicalsEntry
	54,  // 4: types.NetworkDevice.topology:type_name -> types.NetworkTopology
	56,  // 5: types.NetworkDevice.network_links:type_name -> types.NetworkLink
	62,  // 6: types.NetworkDevice.network_health:type_name -> types.NetworkHealth
	14,  // 7: types.EquipmentInfo.device_type:type_name -> types.DeviceType
	15,  // 8: types.EquipmentInfo.device_status:type_name -> types.DeviceStatus
	42,  // 9: types.Physical.chassis:type_name -> types.Chassis
	45,  // 10: types.Physical.ports:type_name -> types.Port
	49,  // 11: types.Physical.power_supplies:type_name -> types.PowerSupply
	50,  // 12: types.Physical.fans:type_name -> types.Fan
	51,  // 13: types.Physical.performance:type_name -> types.PerformanceMetrics
	46,  // 14: types.Logical.intefaces:type_name -> types.Interface
	16,  // 15: types.Chassis.status:type_name -> types.ComponentStatus
	43,  // 16: types.Chassis.slots:type_name -> types.Slot
	45,  // 17: types.Chassis.ports:type_name -> types.Port
	44,  // 18: types.Chassis.modules:type_name -> types.Module
	49,  // 19: types.Chassis.power_supplies:type_name -> types.PowerSupply
	50,  // 20: types.Chassis.fans:type_name -> types.Fan
	44,  // 21: types.Slot.module:type_name -> types.Module
	45,  // 22: types.Slot.ports:type_name -> types.Port
	17,  // 23: types.Module.module_type:type_name -> types.ModuleType
	16,  // 24: types.Module.status:type_name -> types.ComponentStatus
	45,  // 25: types.Module.ports:type_name -> types.Port
	47,  // 26: types.Module.cpus:type_name -> types.Cpu
	48,  // 27: types.Module.memory_modules:type_name -> types.Memory
	46,  // 28: types.Port.interfaces:type_name -> types.Interface
	18,  // 29: types.Interface.interface_type:type_name -> types.InterfaceType
	75,  // 30: types.Interface.te_info:type_name -> types.TrafficEngineeringInfo
	81,  // 31: types.Interface.qos_info:type_name -> types.QosInfo
	90,  // 32: types.Interface.bgp_info:type_name -> types.BgpInfo
	94,  // 33: types.Interface.mpls_info:type_name -> types.MplsInfo
	53,  // 34: types.Interface.statistics:type_name -> types.InterfaceStatistics
	16,  // 35: types.Cpu.status:type_name -> types.ComponentStatus
	16,  // 36: types.Memory.status:type_name -> types.ComponentStatus
	19,  // 37: types.PowerSupply.power_type:type_name -> types.PowerType
	16,  // 38: types.PowerSupply.status:type_name -> types.ComponentStatus
	16,  // 39: types.Fan.status:type_name -> types.ComponentStatus
	52,  // 40: types.PerformanceMetrics.processes:type_name -> types.ProcessInfo
	20,  // 41: types.NetworkTopology.topology_type:type_name -> types.TopologyType
	55,  // 42: types.NetworkTopology.nodes:type_name -> types.NetworkNode
	57,  // 43: types.NetworkTopology.edges:type_name -> types.NetworkEdge
	59,  // 44: types.NetworkTopology.geographic_bounds:type_name -> types.GeographicBounds
	63,  // 45: types.NetworkTopology.statistics:type_name -> types.TopologyStatistics
	71,  // 46: types.NetworkTopology.health_status:type_name -> types.TopologyHealth
	61,  // 47: types.NetworkTopology.regions:type_name -> types.NetworkRegion
	21,  // 48: types.NetworkNode.node_type:type_name -> types.NetworkNodeType
	22,  // 49: types.NetworkNode.status:type_name -> types.NetworkNodeStatus
	58,  // 50: types.NetworkNode.coordinates:type_name -> types.GeographicCoordinates
	65,  // 51: types.NetworkNode.capabilities:type_name -> types.NodeCapabilities
	66,  // 52: types.NetworkNode.metrics:type_name -> types.NodeMetrics
	23,  // 53: types.NetworkLink.link_status:type_name -> types.LinkStatus
	24,  // 54: types.NetworkLink.link_type:type_name -> types.LinkType
	68,  // 55: types.NetworkLink.metrics:type_name -> types.LinkMetrics
	60,  // 56: types.NetworkLink.path:type_name -> types.GeographicPath
	25,  // 57: types.NetworkEdge.edge_type:type_name -> types.EdgeType
	26,  // 58: types.NetworkEdge.status:type_name -> types.EdgeStatus
	69,  // 59: types.NetworkEdge.properties:type_name -> types.EdgeProperties
	70,  // 60: types.NetworkEdge.metrics:type_name -> types.EdgeMetric
	58,  // 61: types.GeographicBounds.north_east:type_name -> types.GeographicCoordinates
	58,  // 62: types.GeographicBounds.south_west:type_name -> types.GeographicCoordinates
	58,  // 63: types.GeographicBounds.center:type_name -> types.GeographicCoordinates
	58,  // 64: types.GeographicPath.waypoints:type_name -> types.GeographicCoordinates
	27,  // 65: types.GeographicPath.path_type:type_name -> types.PathType
	28,  // 66: types.NetworkRegion.region_type:type_name -> types.RegionType
	59,  // 67: types.NetworkRegion.bounds:type_name -> types.GeographicBounds
	64,  // 68: types.NetworkRegion.statistics:type_name -> types.RegionStatistics
	104, // 69: types.NetworkRegion.health:type_name -> types.RegionHealth
	29,  // 70: types.NetworkHealth.overall_status:type_name -> types.HealthStatus
	72,  // 71: types.NetworkHealth.alerts:type_name -> types.HealthAlert
	64,  // 72: types.TopologyStatistics.region_stats:type_name -> types.RegionStatistics
	67,  // 73: types.NodeMetrics.interface_metrics:type_name -> types.InterfaceMetric
	30,  // 74: types.InterfaceMetric.status:type_name -> types.InterfaceStatus
	107, // 75: types.EdgeProperties.attributes:type_name -> types.EdgeProperties.AttributesEntry
	29,  // 76: types.TopologyHealth.status:type_name -> types.HealthStatus
	73,  // 77: types.TopologyHealth.issues:type_name -> types.HealthIssue
	74,  // 78: types.TopologyHealth.recommendations:type_name -> types.HealthRecommendation
	31,  // 79: types.HealthAlert.severity:type_name -> types.AlertSeverity
	32,  // 80: types.HealthAlert.component_type:type_name -> types.ComponentType
	33,  // 81: types.HealthIssue.severity:type_name -> types.IssueSeverity
	34,  // 82: types.HealthIssue.category:type_name -> types.IssueCategory
	35,  // 83: types.HealthRecommendation.type:type_name -> types.RecommendationType
	36,  // 84: types.HealthRecommendation.priority:type_name -> types.RecommendationPriority
	76,  // 85: types.TrafficEngineeringInfo.te_tunnels:type_name -> types.TeTunnel
	78,  // 86: types.TrafficEngineeringInfo.rsvp_info:type_name -> types.RsvpInfo
	0,   // 87: types.TeTunnel.status:type_name -> types.TunnelStatus
	1,   // 88: types.TeTunnel.tunnel_type:type_name -> types.TunnelType
	77,  // 89: types.TeTunnel.lsps:type_name -> types.TeLsp
	89,  // 90: types.TeTunnel.metrics:type_name -> types.TeMetrics
	99,  // 91: types.TeTunnel.sr_policies:type_name -> types.SrPolicy
	2,   // 92: types.TeLsp.status:type_name -> types.LspStatus
	89,  // 93: types.TeLsp.metrics:type_name -> types.TeMetrics
	79,  // 94: types.RsvpInfo.sessions:type_name -> types.RsvpSession
	80,  // 95: types.RsvpInfo.reservations:type_name -> types.RsvpReservation
	3,   // 96: types.RsvpSession.status:type_name -> types.SessionStatus
	4,   // 97: types.RsvpReservation.status:type_name -> types.ReservationStatus
	82,  // 98: types.QosInfo.policies:type_name -> types.QosPolicy
	83,  // 99: types.QosInfo.class_maps:type_name -> types.ClassMap
	84,  // 100: types.QosInfo.policy_maps:type_name -> types.PolicyMap
	87,  // 101: types.QosPolicy.classes:type_name -> types.QosClass
	88,  // 102: types.QosPolicy.stats:type_name -> types.QosPolicyStats
	85,  // 103: types.PolicyMap.policy_classes:type_name -> types.PolicyClass
	86,  // 104: types.PolicyClass.actions:type_name -> types.QosAction
	5,   // 105: types.QosAction.action_type:type_name -> types.ActionType
	87,  // 106: types.QosPolicyStats.class_stats:type_name -> types.QosClass
	91,  // 107: types.BgpInfo.peers:type_name -> types.BgpPeer
	92,  // 108: types.BgpInfo.routes:type_name -> types.BgpRoute
	93,  // 109: types.BgpInfo.statistics:type_name -> types.BgpStats
	6,   // 110: types.BgpPeer.state:type_name -> types.BgpPeerState
	7,   // 111: types.BgpPeer.peer_type:type_name -> types.BgpPeerType
	8,   // 112: types.BgpRoute.origin:type_name -> types.BgpOrigin
	95,  // 113: types.MplsInfo.labels:type_name -> types.MplsLabel
	96,  // 114: types.MplsInfo.fecs:type_name -> types.MplsFec
	97,  // 115: types.MplsInfo.ldp_sessions:type_name -> types.LdpSession
	98,  // 116: types.MplsInfo.forwarding_table:type_name -> types.MplsForwardingTable
	9,   // 117: types.MplsLabel.label_type:type_name -> types.MplsLabelType
	95,  // 118: types.MplsFec.labels:type_name -> types.MplsLabel
	10,  // 119: types.LdpSession.state:type_name -> types.LdpSessionState
	95,  // 120: types.MplsForwardingTable.entries:type_name -> types.MplsLabel
	11,  // 121: types.SrPolicy.status:type_name -> types.SrPolicyStatus
	100, // 122: types.SrPolicy.paths:type_name -> types.SrPath
	102, // 123: types.SrPolicy.metrics:type_name -> types.SrPolicyMetrics
	12,  // 124: types.SrPath.status:type_name -> types.SrPathStatus
	101, // 125: types.SrPath.segments:type_name -> types.SrSegment
	103, // 126: types.SrPath.metrics:type_name -> types.SrPathMetrics
	13,  // 127: types.SrSegment.segment_type:type_name -> types.SrSegmentType
	29,  // 128: types.RegionHealth.status:type_name -> types.HealthStatus
	72,  // 129: types.RegionHealth.alerts:type_name -> types.HealthAlert
	40,  // 130: types.NetworkDevice.PhysicalsEntry.value:type_name -> types.Physical
	41,  // 131: types.NetworkDevice.LogicalsEntry.value:type_name -> types.Logical
	132, // [132:132] is the sub-list for method output_type
	132, // [132:132] is the sub-list for method input_type
	132, // [132:132] is the sub-list for extension type_name
	132, // [132:132] is the sub-list for extension extendee
	0,   // [0:132] is the sub-list for field type_name
}

func init() { file_inventory_proto_init() }
func file_inventory_proto_init() {
	if File_inventory_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inventory_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkDeviceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Physical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chassis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Module); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerSupply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkTopology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeographicCoordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeographicBounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeographicPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthIssue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficEngineeringInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeTunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeLsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpReservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosPolicyStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsFec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LdpSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsForwardingTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrPolicyMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrPathMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inventory_proto_rawDesc,
			NumEnums:      37,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_inventory_proto_goTypes,
		DependencyIndexes: file_inventory_proto_depIdxs,
		EnumInfos:         file_inventory_proto_enumTypes,
		MessageInfos:      file_inventory_proto_msgTypes,
	}.Build()
	File_inventory_proto = out.File
	file_inventory_proto_rawDesc = nil
	file_inventory_proto_goTypes = nil
	file_inventory_proto_depIdxs = nil
}
